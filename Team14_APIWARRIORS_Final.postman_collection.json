{
	"info": {
		"_postman_id": "e3fcdabb-2bb8-4041-a79a-a7f55d52f682",
		"name": "Team14_APIWarriors_Final",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33507794",
		"_collection_link": "https://speeding-trinity-293880.postman.co/workspace/Team14-APIWARRIORS~a94868f2-31b5-4e25-8b41-1652134ff048/collection/33507794-e3fcdabb-2bb8-4041-a79a-a7f55d52f682?action=share&source=collection_link&creator=33507794"
	},
	"item": [
		{
			"name": "ProgramController_DDT",
			"item": [
				{
					"name": "userlogin Test01",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var endpoint = data.Endpoint;\r",
									"if (pm.request.method === \"POST\" && endpoint === \"/login\") {\r",
									"\r",
									"pm.test(\"set the authentication\", function () {\r",
									"    \r",
									"    const jsonData = pm.response.json();\r",
									"    var bodytoken=jsonData.token;\r",
									"    pm.environment.set(\"BearerToken\",bodytoken);\r",
									"    \r",
									"});\r",
									"        console.log(\"Test already executed for /login endpoint.\");\r",
									"    }\r",
									"else {\r",
									"    console.log(\"Current request is not for /login endpoint.\");\r",
									"}\r",
									"\r",
									"if(pm.response.code===201){\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"            pm.response.to.have.status(200);\r",
									"        });}\r",
									"        \r",
									"else if(pm.response.code=== 400){\r",
									"    pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});}\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var data = pm.iterationData.toObject();\r",
									"\r",
									"var endpoint = data.Endpoint;\r",
									"\r",
									"if (endpoint === '/login') {\r",
									"var password = data.password;\r",
									"var userLoginEmailId = data.userLoginEmailId;\r",
									"\r",
									"pm.environment.set(\"password\", password);\r",
									"pm.environment.set(\"loginEmail\", userLoginEmailId);\r",
									"pm.request.url  = pm.variables.replaceIn(\"{{BaseurlLMS}}\" + endpoint);\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"password\": \"{{password}}\",\r\n  \"userLoginEmailId\": \"{{loginEmail}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseurlLMS}}",
							"host": [
								"{{BaseurlLMS}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateProgram Test02",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									" var data = pm.iterationData.toObject();\r",
									"var endpoint = data.Endpoint;\r",
									"var programDescription = data.programDescription;\r",
									"var programName = data.programName;\r",
									"var programStatus = data.programStatus;\r",
									"if (pm.request.method === \"POST\" && endpoint === \"/saveprogram\") {\r",
									"if(pm.response.code===201){\r",
									"    pm.test(\"Status code is 201\", function () {\r",
									"        pm.response.to.have.status(201);\r",
									"        pm.response.to.have.status(\"Created\");\r",
									"\r",
									" try{\r",
									"   var jsonData = pm.response.json();\r",
									"    pm.environment.set(\"programId\", jsonData.programId);\r",
									"     pm.environment.set(\"programName\", jsonData.programName);\r",
									"\r",
									"pm.test(\"Response body contains programName\", function () {\r",
									" pm.expect(jsonData.programName).to.eql(programName);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains programId\", function () {\r",
									"pm.expect(jsonData.programId).to.eql(pm.environment.get(\"programId\"));\r",
									" });\r",
									"\r",
									" pm.test(\"Response body contains programStatus\", function () {\r",
									" pm.expect(jsonData.programStatus).to.eql(programStatus);\r",
									" });\r",
									"   \r",
									"   pm.test(\"Content-Type header is present\", function() {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    });\r",
									"pm.test(\"Content-Type header is application/json\", function() {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									" });\r",
									" }catch (error) {\r",
									"    console.error(\"Error parsing response JSON:\", error.message);\r",
									" }\r",
									" });\r",
									"}\r",
									"    if(pm.response.code=== 400){\r",
									"    pm.test(\"Response code is 400\", function () {\r",
									"    console.error(\"Bad request: \", pm.response.json());\r",
									"   pm.response.to.have.status(400);\r",
									" });\r",
									"}\r",
									"if(pm.response.code===201){\r",
									"var schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"programId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"programName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"programDescription\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"programStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"creationTime\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"lastModTime\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"programId\",\r",
									"    \"programName\",\r",
									"    \"programDescription\",\r",
									"    \"programStatus\",\r",
									"    \"creationTime\",\r",
									"    \"lastModTime\"\r",
									"  ]\r",
									"}\r",
									"pm.test(\"Response body schema is valid\", function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"}\r",
									"}\r",
									"    \r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"   "
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var data = pm.iterationData.toObject();\r",
									"var endpoint = data.Endpoint;\r",
									"console.log(\"Endpoint:\", endpoint);\r",
									"\r",
									"if (endpoint === '/saveprogram') {\r",
									"var programDescription = data.programDescription;\r",
									"var programName = data.programName;\r",
									"var programStatus = data.programStatus;\r",
									"pm.request.url  = pm.variables.replaceIn(\"{{BaseurlLMS}}\" + endpoint);\r",
									"\r",
									"}\r",
									"const token = pm.environment.get(\"BearerToken\");\r",
									"if (token) {\r",
									"    pm.request.headers.add({\r",
									"        key: \"Authorization\",\r",
									"        value: `Bearer ${token}`\r",
									"    });\r",
									"} else {\r",
									"    console.error(\"Bearer token not found in environment variables.\");\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programDescription\": \"{{programDescription}}\",\r\n  \"programName\": \"{{programName}}\",\r\n  \"programStatus\": \"{{programStatus}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseurlLMS}}",
							"host": [
								"{{BaseurlLMS}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Allprograms Test03",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var endpoint = data.Endpoint;",
									"if (pm.request.method === \"GET\" && endpoint === \"/allPrograms\")",
									"     {",
									"if(pm.response.code===200){",
									"    pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type header is present\", function() {",
									"  pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Content-Type header is application/json\", function() {",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"});",
									"}",
									"else if(pm.response.code===404){",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});}",
									"     }",
									"     if(pm.response.code===200){",
									"var schema=",
									"{",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
									"  \"title\": \"Generated schema for Root\",",
									"  \"type\": \"array\",",
									"  \"items\": {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"      \"programId\": {",
									"        \"type\": \"number\"",
									"      },",
									"      \"programName\": {",
									"        \"type\": \"string\"",
									"      },",
									"      \"programDescription\": {",
									"        \"type\": \"string\"",
									"      },",
									"      \"programStatus\": {",
									"        \"type\": \"string\"",
									"      },",
									"      \"creationTime\": {",
									"        \"type\": \"string\"",
									"      },",
									"      \"lastModTime\": {",
									"        \"type\": \"string\"",
									"      }",
									"    },",
									"    \"required\": [",
									"      \"programId\",",
									"      \"programName\",",
									"      \"programDescription\",",
									"      \"programStatus\",",
									"      \"creationTime\",",
									"      \"lastModTime\"",
									"    ]",
									"  }",
									"}",
									"pm.test(\"Response body schema is valid\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"}",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"const token = pm.environment.get(\"BearerToken\");\r",
									"if (token) {\r",
									"    pm.request.headers.add({\r",
									"        key: \"Authorization\",\r",
									"        value: `Bearer ${token}`\r",
									"    });\r",
									"} else {\r",
									"    console.error(\"Bearer token not found in environment variables.\");\r",
									"}\r",
									"var data = pm.iterationData.toObject();\r",
									"var endpoint = data.Endpoint;\r",
									"console.log(\"Endpoint:\", endpoint);\r",
									"if (endpoint === '/allPrograms') {\r",
									"pm.request.url  = pm.variables.replaceIn(\"{{BaseurlLMS}}\"+endpoint);\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseurlLMS}}",
							"host": [
								"{{BaseurlLMS}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "AllPrgmswithuser Test04",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var endpoint = data.Endpoint;\r",
									"if (pm.request.method === \"GET\" && endpoint === \"/allProgramsWithUsers\")\r",
									"     {\r",
									"        if(pm.response.code===200){\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type header is present\", function() {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"pm.test(\"Content-Type header is application/json\", function() {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});}\r",
									"else if(pm.response.code===404){\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});}\r",
									"else if(pm.response.code===405){\r",
									"pm.test(\"Status code is 405\", function () {\r",
									"    pm.response.to.have.status(405);\r",
									"});}\r",
									"     }     \r",
									"     if(pm.response.code===200){\r",
									"\r",
									"var schema=\r",
									"{\r",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"array\",\r",
									"  \"items\": {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"      \"programId\": {\r",
									"        \"type\": \"number\"\r",
									"      },\r",
									"      \"programName\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"programDescription\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"programStatus\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"programUsers\": {\r",
									"        \"type\": \"array\",\r",
									"        \"items\": {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"userId\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"userFirstName\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"userLastName\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"userMiddleName\": {\r",
									"              \"type\": [\"string\",\"null\"]\r",
									"            },\r",
									"            \"userPhoneNumber\": {\r",
									"              \"type\": \"number\"\r",
									"            },\r",
									"            \"userLocation\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"userTimeZone\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"userLinkedinUrl\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"userEduUg\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"userEduPg\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"userComments\": {\r",
									"              \"type\":[\"string\",\"null\"]\r",
									"            },\r",
									"            \"userVisaStatus\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"userLoginEmail\": {}\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"userId\",\r",
									"            \"userFirstName\",\r",
									"            \"userLastName\",\r",
									"            \r",
									"            \"userPhoneNumber\",\r",
									"            \"userLocation\",\r",
									"            \"userTimeZone\",\r",
									"            \"userLinkedinUrl\",\r",
									"            \"userEduUg\",\r",
									"            \"userEduPg\",\r",
									"            \r",
									"            \"userVisaStatus\",\r",
									"            \"userLoginEmail\"\r",
									"          ]\r",
									"        }\r",
									"      },\r",
									"      \"creationTime\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"lastModTime\": {\r",
									"        \"type\": \"string\"\r",
									"      }\r",
									"    },\r",
									"    \"required\": [\r",
									"      \"programId\",\r",
									"      \"programName\",\r",
									"      \"programDescription\",\r",
									"      \"programStatus\",\r",
									"      \"programUsers\",\r",
									"      \"creationTime\",\r",
									"      \"lastModTime\"\r",
									"    ]\r",
									"  }\r",
									"}\r",
									"  pm.test(\"Response body schema is valid\", function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"     }"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const token = pm.environment.get(\"BearerToken\");\r",
									"if (token) {\r",
									"    pm.request.headers.add({\r",
									"        key: \"Authorization\",\r",
									"        value: `Bearer ${token}`\r",
									"    });\r",
									"} else {\r",
									"    console.error(\"Bearer token not found in environment variables.\");\r",
									"}\r",
									"var data = pm.iterationData.toObject();\r",
									"var endpoint = data.Endpoint;\r",
									"console.log(\"Endpoint:\", endpoint);\r",
									"if (endpoint === '/allProgramsWithUsers') {\r",
									"pm.request.url  = pm.variables.replaceIn(\"{{BaseurlLMS}}\" + endpoint);\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseurlLMS}}",
							"host": [
								"{{BaseurlLMS}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "programid Test05",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var endpoint = data.Endpoint;\r",
									"if (pm.request.method === \"GET\" && endpoint === \"/programs/{programId}\")\r",
									"     {\r",
									"if(pm.response.code===200){\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"   \r",
									"pm.test(\"Content-Type header is present\", function() {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"pm.test(\"Content-Type header is application/json\", function() {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"}  else if(pm.response.code===404){\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});}\r",
									"}\r",
									"if(pm.response.code===200){\r",
									"var schema=\r",
									"{\r",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"items\": {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"      \"programId\": {\r",
									"        \"type\": \"number\"\r",
									"      },\r",
									"      \"programName\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"programDescription\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"programStatus\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"creationTime\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"lastModTime\": {\r",
									"        \"type\": \"string\"\r",
									"      }\r",
									"    },\r",
									"    \"required\": [\r",
									"      \"programId\",\r",
									"      \"programName\",\r",
									"      \"programDescription\",\r",
									"      \"programStatus\",\r",
									"      \"creationTime\",\r",
									"      \"lastModTime\"\r",
									"    ]\r",
									"  }\r",
									"}\r",
									"pm.test(\"Response body schema is valid\", function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const token = pm.environment.get(\"BearerToken\");\r",
									"if (token) {\r",
									"    pm.request.headers.add({\r",
									"        key: \"Authorization\",\r",
									"        value: `Bearer ${token}`\r",
									"    });\r",
									"} else {\r",
									"    console.error(\"Bearer token not found in environment variables.\");\r",
									"}\r",
									"\r",
									"var data = pm.iterationData.toObject();\r",
									"var endpoint = data.Endpoint;\r",
									"var programId = data.programId;\r",
									"console.log(\"Endpoint:\", endpoint);\r",
									"console.log(\"input programId\",programId);\r",
									"console.log(\"BaseurlLMS value:\", pm.variables.get(\"BaseurlLMS\"));\r",
									"pm.request.url  = pm.variables.replaceIn(\"{{BaseurlLMS}}/programs/\" + programId);\r",
									"console.log(\"Updated URL:\",pm.request.url);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseurlLMS}}",
							"host": [
								"{{BaseurlLMS}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "ProgramId Test06",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									" var data = pm.iterationData.toObject();\r",
									"var endpoint = data.Endpoint;\r",
									"var programName = data.programName;\r",
									"var programStatus = data.programStatus;\r",
									"var programId = data.programId;\r",
									"if (pm.request.method === \"PUT\" && endpoint === \"/putprogram/{programId}\") {\r",
									"if(pm.response.code===200){\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"\r",
									" try{\r",
									"   var jsonData = pm.response.json();\r",
									"    \r",
									"  pm.test(\"Response body contains programName\", function () {\r",
									" pm.expect(jsonData.programName).to.eql(programName);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains programId\", function () {\r",
									"    pm.expect(jsonData).to.have.property('programId');\r",
									"});\r",
									"\r",
									" pm.test(\"Response body contains programStatus\", function () {\r",
									" pm.expect(jsonData.programStatus).to.eql(programStatus);\r",
									" });\r",
									"   \r",
									"   pm.test(\"Content-Type header is present\", function() {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    });\r",
									"pm.test(\"Content-Type header is application/json\", function() {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									" });\r",
									" }catch (error) {\r",
									"    console.error(\"Error parsing response JSON:\", error.message);\r",
									" }\r",
									" });\r",
									"}\r",
									" if(pm.response.code=== 400){\r",
									"pm.test(\"Response code is 400\", function () {\r",
									"pm.response.to.have.status(400);\r",
									"});\r",
									"}\r",
									"if(pm.response.code=== 404){\r",
									"    pm.test(\"Response code is 404\", function () {\r",
									"pm.response.to.have.status(404);\r",
									"});\r",
									"}\r",
									"}\r",
									"if(pm.response.code===200){\r",
									"var schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"programId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"programName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"programDescription\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"programStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"creationTime\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"lastModTime\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"programId\",\r",
									"    \"programName\",\r",
									"    \"programDescription\",\r",
									"    \"programStatus\",\r",
									"    \"creationTime\",\r",
									"    \"lastModTime\"\r",
									"  ]\r",
									"}\r",
									"pm.test(\"Response body schema is valid\", function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"}\r",
									"\r",
									"    \r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"   "
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var data = pm.iterationData.toObject();\r",
									"var endpoint = data.Endpoint;\r",
									"console.log(\"Endpoint:\", endpoint);\r",
									"//var programId = pm.environment.get(\"programId\");\r",
									"\r",
									"\r",
									"if (endpoint === '/putprogram/{programId}') {\r",
									"var programDescription = data.programDescription;\r",
									"var programName = data.programName;\r",
									"var programStatus = data.programStatus;\r",
									"var programId = data.programId;\r",
									"pm.request.url  = pm.variables.replaceIn(\"{{BaseurlLMS}}/putprogram/\" + programId);\r",
									"\r",
									"}\r",
									"const token = pm.environment.get(\"BearerToken\");\r",
									"if (token) {\r",
									"    pm.request.headers.add({\r",
									"        key: \"Authorization\",\r",
									"        value: `Bearer ${token}`\r",
									"    });\r",
									"} else {\r",
									"    console.error(\"Bearer token not found in environment variables.\");\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programDescription\": \"{{programDescription}}\",\r\n  \"programName\": \"{{programName}}\",\r\n  \"programStatus\": \"{{programStatus}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseurlLMS}}",
							"host": [
								"{{BaseurlLMS}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "ProgramName Test07",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									" var data = pm.iterationData.toObject();\r",
									"var endpoint = data.Endpoint;\r",
									"var programDescription = data.programDescription;\r",
									"var programName = data.programName;\r",
									"var programStatus = data.programStatus;\r",
									"if (pm.request.method === \"PUT\" && endpoint === \"/program/{programName}\") {\r",
									"if(pm.response.code===200){\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"\r",
									" try{\r",
									"   var jsonData = pm.response.json();\r",
									"  \r",
									"\r",
									"  pm.test(\"Response body contains programName\", function () {\r",
									" pm.expect(jsonData.programName).to.eql(programName);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains programId\", function () {\r",
									"    pm.expect(jsonData).to.have.property('programId');\r",
									"});\r",
									"\r",
									" pm.test(\"Response body contains programStatus\", function () {\r",
									" pm.expect(jsonData.programStatus).to.eql(programStatus);\r",
									" });\r",
									"   \r",
									"   pm.test(\"Content-Type header is present\", function() {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    });\r",
									"pm.test(\"Content-Type header is application/json\", function() {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									" });\r",
									" }catch (error) {\r",
									"    console.error(\"Error parsing response JSON:\", error.message);\r",
									" }\r",
									" });\r",
									"}\r",
									" if(pm.response.code=== 400){\r",
									"pm.test(\"Response code is 400\", function () {\r",
									" pm.response.to.have.status(400);\r",
									"});\r",
									"}\r",
									"if(pm.response.code=== 404){\r",
									"    pm.test(\"Response code is 404\", function () {\r",
									"pm.response.to.have.status(404);\r",
									"});\r",
									"}\r",
									"}\r",
									"if(pm.response.code===201){\r",
									"var schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"programId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"programName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"programDescription\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"programStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"creationTime\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"lastModTime\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"programId\",\r",
									"    \"programName\",\r",
									"    \"programDescription\",\r",
									"    \"programStatus\",\r",
									"    \"creationTime\",\r",
									"    \"lastModTime\"\r",
									"  ]\r",
									"}\r",
									"pm.test(\"Response body schema is valid\", function() {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"}\r",
									"\r",
									"    \r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"   "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var data = pm.iterationData.toObject();\r",
									"var endpoint = data.Endpoint;\r",
									"console.log(\"Endpoint:\", endpoint);\r",
									"var programName = pm.environment.get(\"programName\");\r",
									"pm.request.url  = pm.variables.replaceIn(\"{{BaseurlLMS}}/program/\" +programName);\r",
									"\r",
									"if (endpoint === '/program/{programName}') {\r",
									"var programDescription = data.programDescription;\r",
									"var programName = data.programName;\r",
									"var programStatus = data.programStatus;\r",
									"}\r",
									"const token = pm.environment.get(\"BearerToken\");\r",
									"if (token) {\r",
									"    pm.request.headers.add({\r",
									"        key: \"Authorization\",\r",
									"        value: `Bearer ${token}`\r",
									"    });\r",
									"} else {\r",
									"    console.error(\"Bearer token not found in environment variables.\");\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programDescription\": \"{{programDescription}}\",\r\n  \"programName\": \"{{programName}}\",\r\n  \"programStatus\": \"{{programStatus}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseurlLMS}}",
							"host": [
								"{{BaseurlLMS}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "programName Test08",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									" var data = pm.iterationData.toObject();\r",
									"var endpoint = data.Endpoint;\r",
									"if (pm.request.method === \"DELETE\" && endpoint === \"/deletebyprogname/{programName}\") {\r",
									"\r",
									"const responseText = pm.response.text();\r",
									"if(pm.response.code===200){\r",
									"pm.test(\"Status code is 200 \", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    pm.test(\"Body matches string\", function () {\r",
									"        pm.expect(responseText).to.include(\"is deleted Successfully!\");\r",
									"        \r",
									"    });\r",
									"});\r",
									"} else if(pm.response.code===404){\r",
									"    pm.test(\"Status code is 404 \", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.test(\"Body matches string\", function () {\r",
									"        pm.expect(pm.response.text()).to.include(\"no record found with programName\");\r",
									"      \r",
									"            var jsonData = pm.response.json();\r",
									"            pm.expect(jsonData.success).to.eql(false);\r",
									"        \r",
									"    });\r",
									"});\r",
									"}\r",
									"else {\r",
									"    pm.test(\"Unexpected status code\", function () {\r",
									"        pm.expect.fail(\"Unexpected status code: \" + pm.response.code);\r",
									"    });\r",
									"}\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"pm.test(\"Content-Type header is application/json\", function() {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var data = pm.iterationData.toObject();\r",
									"var endpoint = data.Endpoint;\r",
									"console.log(\"Endpoint:\", endpoint);\r",
									"if (endpoint === '/deletebyprogname/{programName}') {\r",
									"var programName = data.programName;\r",
									"pm.request.url  = pm.variables.replaceIn(\"{{BaseurlLMS}}/deletebyprogname/\" + programName);\r",
									"}\r",
									"const token = pm.environment.get(\"BearerToken\");\r",
									"if (token) {\r",
									"    pm.request.headers.add({\r",
									"        key: \"Authorization\",\r",
									"        value: `Bearer ${token}`\r",
									"    });\r",
									"} else {\r",
									"    console.error(\"Bearer token not found in environment variables.\");\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BaseurlLMS}}/deletebyprogname/{programName}",
							"host": [
								"{{BaseurlLMS}}"
							],
							"path": [
								"deletebyprogname",
								"{programName}"
							]
						}
					},
					"response": []
				},
				{
					"name": "programId Test09",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									" var data = pm.iterationData.toObject();\r",
									"var endpoint = data.Endpoint;\r",
									"if (pm.request.method === \"DELETE\" && endpoint === \"/deletebyprogid/{programId}\") {\r",
									"if(pm.response.code===200){\r",
									"pm.test(\"Status code is 200 \", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    pm.test(\"Body matches string\", function () {\r",
									"        pm.expect(pm.response.text()).to.include(\" Program Id is deleted Successfully!\");\r",
									"    });\r",
									"});\r",
									"} else if(pm.response.code===404){\r",
									"    pm.test(\"Status code is 404 \", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.test(\"Body matches string\", function () {\r",
									"        pm.expect(pm.response.text()).to.include(\"no record found with programId\",  \"success: false\");\r",
									"    });\r",
									"});\r",
									"}\r",
									"else {\r",
									"    pm.test(\"Unexpected status code\", function () {\r",
									"        pm.expect.fail(\"Unexpected status code: \" + pm.response.code);\r",
									"    });\r",
									"}\r",
									"pm.test(\"Content-Type header is application/json\", function() {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var data = pm.iterationData.toObject();\r",
									"var endpoint = data.Endpoint;\r",
									"console.log(\"Endpoint:\", endpoint);\r",
									"if (endpoint === '/deletebyprogid/{programId}') {\r",
									"var programId = data.programId;\r",
									"pm.request.url  = pm.variables.replaceIn(\"{{BaseurlLMS}}/deletebyprogid/\" + programId);\r",
									"}\r",
									"const token = pm.environment.get(\"BearerToken\");\r",
									"if (token) {\r",
									"    pm.request.headers.add({\r",
									"        key: \"Authorization\",\r",
									"        value: `Bearer ${token}`\r",
									"    });\r",
									"} else {\r",
									"    console.error(\"Bearer token not found in environment variables.\");\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BaseurlLMS}}/deletebyprogid/{programId}",
							"host": [
								"{{BaseurlLMS}}"
							],
							"path": [
								"deletebyprogid",
								"{programId}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Batch",
			"item": [
				{
					"name": "Batch_Create New Batch",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Set envoronment variable for next request\r",
									"var data = pm.iterationData.toObject();\r",
									"var endpoint = data.Endpoint;\r",
									"console.log(\"Endpoint:\", endpoint);\r",
									"\r",
									"if (pm.request.method === \"POST\" && endpoint === \"/batches\") {\r",
									"    if(pm.response.code===201){\r",
									"var response = pm.response.json();\r",
									"pm.environment.set(\"batchId\",response.batchId);\r",
									"pm.environment.set(\"batchName\",response.batchName);\r",
									"pm.environment.set(\"programId\",response.programId);\r",
									"\r",
									"pm.test(\"set the BatchID\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    var batchId=jsonData.batchId;\r",
									"    pm.environment.set(\"batchId\",batchId);\r",
									"}); \r",
									"\r",
									"pm.test(\"set the batchName\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    var batchName=jsonData.batchName;\r",
									"    pm.environment.set(\"batchName\",batchName);\r",
									"});\r",
									"\r",
									"pm.test(\"set the programId\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    var programId=jsonData.programId;\r",
									"    pm.environment.set(\"programId\",programId);\r",
									"});\r",
									"\r",
									"//Test the responce code is 201\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"// Test for response time to be within 600ms\r",
									"pm.test(\"Response time is less than 600ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(600);\r",
									"});\r",
									"\r",
									"//Test for the response body is a JSON\r",
									"pm.test(\"Response body is valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"// Test if the response body is not empty\r",
									"pm.test(\"Response body is not empty\", function () {\r",
									"    pm.expect(responseBody).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", ()=> {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", ()=> {\r",
									" pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');\r",
									"});\r",
									"\r",
									"const datatype = pm.response.json();\r",
									"pm.test(\"Test data type of the response\", () => {\r",
									"pm.expect(datatype).to.be.a(\"object\");\r",
									"pm.expect(datatype.batchId).to.be.a(\"number\");\r",
									"pm.expect(datatype.batchName).to.be.a(\"string\");\r",
									"pm.expect(datatype.batchDescription).to.be.a(\"string\");\r",
									"pm.expect(datatype.batchStatus).to.be.a(\"string\");\r",
									"pm.expect(datatype.batchNoOfClasses).to.be.a(\"number\");\r",
									"pm.expect(datatype.programId).to.be.a(\"number\");\r",
									"pm.expect(datatype.programName).to.be.a(\"string\");\r",
									"});\r",
									"    }\r",
									"     if(pm.response.code=== 400){\r",
									"    pm.test(\"Response code is 400\", function () {\r",
									"    console.error(\"Bad request: \", pm.response.json());\r",
									"   pm.response.to.have.status(400);\r",
									" });\r",
									"}\r",
									"if(pm.response.code===201){\r",
									"var schema={\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"batchDescription\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"batchName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchNoOfClasses\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"batchStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"programId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"programName\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"batchDescription\",\r",
									"    \"batchId\",\r",
									"    \"batchName\",\r",
									"    \"batchNoOfClasses\",\r",
									"    \"batchStatus\",\r",
									"    \"programId\",\r",
									"    \"programName\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"Response body matches schema\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"});}\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var data = pm.iterationData.toObject();\r",
									"var endpoint = data.Endpoint;\r",
									"console.log(\"Endpoint:\", endpoint);\r",
									"\r",
									"if (pm.request.method === \"POST\" && endpoint === \"/batches\") {\r",
									"var batchDescription = data.batchDescription;\r",
									"var batchName = data.batchName;\r",
									"var batchStatus = data.batchStatus;\r",
									"var batchNoOfClasses = data.batchNoOfClasses;\r",
									"var programId= pm.environment.get(\"programId\");\r",
									"pm.request.url  = pm.variables.replaceIn(\"{{BaseurlLMS}}\" + endpoint);\r",
									"\r",
									"}\r",
									"const token = pm.environment.get(\"BearerToken\");\r",
									"if (token) {\r",
									"    pm.request.headers.add({\r",
									"        key: \"Authorization\",\r",
									"        value: `Bearer ${token}`\r",
									"    });\r",
									"} else {\r",
									"    console.error(\"Bearer token not found in environment variables.\");\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{batchDescription}}\",\r\n  \"batchName\": \"{{batchName}}\",\r\n  \"batchNoOfClasses\": {{batchNoOfClasses}},\r\n  \"batchStatus\": \"{{batchStatus}}\",\r\n  \"programId\": {{programId}}\r\n }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseurlLMS}}",
							"host": [
								"{{BaseurlLMS}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Batch_GetAllBatches",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"var endpoint = data.Endpoint;\r",
									"if (pm.request.method === \"GET\" && endpoint === \"/batches\")\r",
									"     {\r",
									"if(pm.response.code===200){\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is OK\", ()=> {\r",
									"    pm.response.to.have.status(\"OK\")\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body is valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"// Test if the response body is not empty\r",
									"pm.test(\"Response body is not empty\", function () {\r",
									"    pm.expect(responseBody).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", ()=> {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", ()=> {\r",
									" pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');\r",
									"});\r",
									"\r",
									"var responseBody = pm.response.json();\r",
									"pm.test(\"Response body is an array\", function () {\r",
									"    pm.expect(responseBody).to.be.an('array');\r",
									"});\r",
									"     }if(pm.response.code=== 400){\r",
									"    pm.test(\"Response code is 400\", function () {\r",
									"    console.error(\"Bad request: \", pm.response.json());\r",
									"   pm.response.to.have.status(400);\r",
									" });\r",
									"}\r",
									"}\r",
									"     "
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const token = pm.environment.get(\"BearerToken\");\r",
									"if (token) {\r",
									"    pm.request.headers.add({\r",
									"        key: \"Authorization\",\r",
									"        value: `Bearer ${token}`\r",
									"    });\r",
									"} else {\r",
									"    console.error(\"Bearer token not found in environment variables.\");\r",
									"}\r",
									"var data = pm.iterationData.toObject();\r",
									"var endpoint = data.Endpoint;\r",
									"console.log(\"Endpoint:\", endpoint);\r",
									"if (pm.request.method === \"GET\" && endpoint === \"/batches\") {\r",
									"pm.request.url  = pm.variables.replaceIn(\"{{BaseurlLMS}}\"+endpoint);\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseurlLMS}}",
							"host": [
								"{{BaseurlLMS}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Batch_Get Batch By Batch_Id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const token = pm.environment.get(\"BearerToken\");\r",
									"if (token) {\r",
									"    pm.request.headers.add({\r",
									"        key: \"Authorization\",\r",
									"        value: `Bearer ${token}`\r",
									"    });\r",
									"} else {\r",
									"    console.error(\"Bearer token not found in environment variables.\");\r",
									"}\r",
									"var data = pm.iterationData.toObject();\r",
									"var endpoint = data.Endpoint;\r",
									"var  batchId=pm.environment.get(\"batchId\");\r",
									"console.log(\"Endpoint:\", endpoint);\r",
									"if (endpoint === '/batches/batchId/{batchId}') {\r",
									"\r",
									"pm.request.url  = pm.variables.replaceIn(\"{{BaseurlLMS}}/programs/\" + batchId);\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var endpoint = data.Endpoint;\r",
									"if (pm.request.method === \"GET\" && endpoint === \"/batches/batchId/{batchId}\")\r",
									"     {\r",
									"if(pm.response.code===200){\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is OK\", ()=> {\r",
									"    pm.response.to.have.status(\"OK\")\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body is valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"// Test if the response body is not empty\r",
									"pm.test(\"Response body is not empty\", function () {\r",
									"    pm.expect(responseBody).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", ()=> {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", ()=> {\r",
									" pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');\r",
									"});\r",
									"\r",
									"\r",
									"const datatype = pm.response.json();\r",
									"pm.test(\"Test data type of the response\", () => {\r",
									"pm.expect(datatype).to.be.a(\"object\");\r",
									"pm.expect(datatype.batchId).to.be.a(\"number\");\r",
									"pm.expect(datatype.batchName).to.be.a(\"string\");\r",
									"pm.expect(datatype.batchDescription).to.be.a(\"string\");\r",
									"pm.expect(datatype.batchStatus).to.be.a(\"string\");\r",
									"pm.expect(datatype.batchNoOfClasses).to.be.a(\"number\");\r",
									"pm.expect(datatype.programId).to.be.a(\"number\");\r",
									"pm.expect(datatype.programName).to.be.a(\"string\");\r",
									"});\r",
									"}\r",
									"if(pm.response.code=== 400){\r",
									"    pm.test(\"Response code is 400\", function () {\r",
									"    console.error(\"Bad request: \", pm.response.json());\r",
									"   pm.response.to.have.status(400);\r",
									" });\r",
									"}}\r",
									"if(pm.response.code===200){\r",
									"var schema={\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"batchDescription\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"batchName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchNoOfClasses\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"batchStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"programId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"programName\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"batchDescription\",\r",
									"    \"batchId\",\r",
									"    \"batchName\",\r",
									"    \"batchNoOfClasses\",\r",
									"    \"batchStatus\",\r",
									"    \"programId\",\r",
									"    \"programName\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"Response body matches schema\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"});}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseurlLMS}}",
							"host": [
								"{{BaseurlLMS}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Batch_Get Batch By Batch_Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var endpoint = data.Endpoint;\r",
									"if (pm.request.method === \"GET\" && endpoint === \"/batches/batchName/{batchName}\"){\r",
									"      \r",
									"if(pm.response.code===200){\r",
									"   pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is OK\", ()=> {\r",
									"    pm.response.to.have.status(\"OK\")\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 600ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(600);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"// Test if the response body is not empty\r",
									"pm.test(\"Response body is not empty\", function () {\r",
									"    pm.expect(responseBody).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", ()=> {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", ()=> {\r",
									" pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');\r",
									"});\r",
									"\r",
									"\r",
									"var schema={\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"batchDescription\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"batchName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchNoOfClasses\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"batchStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"programId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"programName\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"batchDescription\",\r",
									"    \"batchId\",\r",
									"    \"batchName\",\r",
									"    \"batchNoOfClasses\",\r",
									"    \"batchStatus\",\r",
									"    \"programId\",\r",
									"    \"programName\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"Response body matches schema\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"});}\r",
									"if(pm.response.code=== 400){\r",
									"    pm.test(\"Response code is 400\", function () {\r",
									"    console.error(\"Bad request: \", pm.response.json());\r",
									"   pm.response.to.have.status(400);\r",
									" });\r",
									"}\r",
									"     }"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const token = pm.environment.get(\"BearerToken\");\r",
									"if (token) {\r",
									"    pm.request.headers.add({\r",
									"        key: \"Authorization\",\r",
									"        value: `Bearer ${token}`\r",
									"    });\r",
									"} else {\r",
									"    console.error(\"Bearer token not found in environment variables.\");\r",
									"}\r",
									"var batchName=pm.environment.get(\"batchName\");\r",
									"var data = pm.iterationData.toObject();\r",
									"var endpoint = data.Endpoint;\r",
									"console.log(\"Endpoint:\", endpoint);\r",
									"if (endpoint === '/batches/batchName/{batchName}') {\r",
									"pm.request.url  = pm.variables.replaceIn(\"{{BaseurlLMS}}/batches/batchName/\" + batchName);\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseurlLMS}}",
							"host": [
								"{{BaseurlLMS}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Batch_Get Batch By Program_Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var endpoint = data.Endpoint;\r",
									"if (pm.request.method === \"GET\" && endpoint === \"/batches/program/{programId}\")\r",
									"     {\r",
									"if(pm.response.code===200){\r",
									"    \r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is OK\", ()=> {\r",
									"    pm.response.to.have.status(\"OK\")\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 600ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(600);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"// Test if the response body is not empty\r",
									"pm.test(\"Response body is not empty\", function () {\r",
									"    pm.expect(responseBody).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", ()=> {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", ()=> {\r",
									" pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');\r",
									"});\r",
									"\r",
									"var responseBody = pm.response.json();\r",
									"pm.test(\"Response body is an array\", function () {\r",
									"    pm.expect(responseBody).to.be.an('array');\r",
									"});}\r",
									"if(pm.response.code=== 400){\r",
									"    pm.test(\"Response code is 400\", function () {\r",
									"    console.error(\"Bad request: \", pm.response.json());\r",
									"   pm.response.to.have.status(400);\r",
									" });\r",
									"}\r",
									"     }\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const token = pm.environment.get(\"BearerToken\");\r",
									"if (token) {\r",
									"    pm.request.headers.add({\r",
									"        key: \"Authorization\",\r",
									"        value: `Bearer ${token}`\r",
									"    });\r",
									"} else {\r",
									"    console.error(\"Bearer token not found in environment variables.\");\r",
									"}\r",
									"\r",
									"var programId=pm.environment.get(\"programId\");\r",
									"var data = pm.iterationData.toObject();\r",
									"var endpoint = data.Endpoint;\r",
									"console.log(\"Endpoint:\", endpoint);\r",
									"if (endpoint === '/batches/program/{programId}') {\r",
									"pm.request.url  = pm.variables.replaceIn(\"{{BaseurlLMS}}/batches/program/\" + programId);\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseurlLMS}}/allPrograms",
							"host": [
								"{{BaseurlLMS}}"
							],
							"path": [
								"allPrograms"
							]
						}
					},
					"response": []
				},
				{
					"name": "Batch_Update Batch By Batch_Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the responce code is 201\r",
									"var endpoint = data.Endpoint;\r",
									"if (pm.request.method === \"PUT\" && endpoint === \"/batches/{batchId}\")\r",
									"     {\r",
									"if(pm.response.code===200){\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"//Test for the response body is a JSON\r",
									"pm.test(\"Response body is valid JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"// Test if the response body is not empty\r",
									"pm.test(\"Response body is not empty\", function () {\r",
									"    pm.expect(responseBody).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is present\", ()=> {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", ()=> {\r",
									" pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');\r",
									"});\r",
									"\r",
									"const datatype = pm.response.json();\r",
									"pm.test(\"Test data type of the response\", () => {\r",
									"pm.expect(datatype).to.be.a(\"object\");\r",
									"pm.expect(datatype.batchId).to.be.a(\"number\");\r",
									"pm.expect(datatype.batchName).to.be.a(\"string\");\r",
									"pm.expect(datatype.batchDescription).to.be.a(\"string\");\r",
									"pm.expect(datatype.batchStatus).to.be.a(\"string\");\r",
									"pm.expect(datatype.batchNoOfClasses).to.be.a(\"number\");\r",
									"pm.expect(datatype.programId).to.be.a(\"number\");\r",
									"pm.expect(datatype.programName).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"var schema={\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"batchDescription\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"batchName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchNoOfClasses\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"batchStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"programId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"programName\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"batchDescription\",\r",
									"    \"batchId\",\r",
									"    \"batchName\",\r",
									"    \"batchNoOfClasses\",\r",
									"    \"batchStatus\",\r",
									"    \"programId\",\r",
									"    \"programName\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"Response body matches schema\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"});\r",
									"}\r",
									"if(pm.response.code=== 400){\r",
									"    pm.test(\"Response code is 400\", function () {\r",
									"    console.error(\"Bad request: \", pm.response.json());\r",
									"   pm.response.to.have.status(400);\r",
									" });\r",
									"}\r",
									"     }\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var data = pm.iterationData.toObject();\r",
									"var endpoint = data.Endpoint;\r",
									"console.log(\"Endpoint:\", endpoint);\r",
									"\r",
									"\r",
									"if (endpoint === '/batches/{batchId}') {\r",
									"var batchDescription = data.batchDescription;\r",
									"var batchNoOfClasses = data.batchNoOfClasses;\r",
									"var batchStatus = data.batchStatus;\r",
									"var  batchId=pm.environment.get(\"batchId\");\r",
									"var programName= pm.environment.get(\"programName\");\r",
									"var programId=  pm.environment.get(\"programId\");\r",
									"pm.request.url  = pm.variables.replaceIn(\"{{BaseurlLMS}}/batches/\" + batchId );\r",
									"\r",
									"}\r",
									"const token = pm.environment.get(\"BearerToken\");\r",
									"if (token) {\r",
									"    pm.request.headers.add({\r",
									"        key: \"Authorization\",\r",
									"        value: `Bearer ${token}`\r",
									"    });\r",
									"} else {\r",
									"    console.error(\"Bearer token not found in environment variables.\");\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{batchDescription}}\",\r\n  \"batchId\": {{batchId}},\r\n  \"batchName\": \"{{batchName}}\",\r\n  \"batchNoOfClasses\": {{batchNoOfClasses}},\r\n  \"batchStatus\": \"{{batchStatus}}\",\r\n  \"programId\": {{programId}},\r\n  \"programName\": \"{{programName}}\"\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseurlLMS}}",
							"host": [
								"{{BaseurlLMS}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Batch_Delete Batch By Batch_Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is OK\", ()=> {\r",
									"    pm.response.to.have.status(\"OK\")\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 600ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(600);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const token = pm.environment.get(\"BearerToken\");\r",
									"if (token) {\r",
									"    pm.request.headers.add({\r",
									"        key: \"Authorization\",\r",
									"        value: `Bearer ${token}`\r",
									"    });\r",
									"} else {\r",
									"    console.error(\"Bearer token not found in environment variables.\");\r",
									"}\r",
									"pm.environment.get(\"batchId\");\r",
									"var data = pm.iterationData.toObject();\r",
									"var endpoint = data.Endpoint;\r",
									"console.log(\"Endpoint:\", endpoint);\r",
									"if (endpoint === '/batches/{batchId}') {\r",
									"pm.request.url  = pm.variables.replaceIn(\"{{BaseurlLMS}}\"+endpoint);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BaseurlLMS}}",
							"host": [
								"{{BaseurlLMS}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Batch_NS_Create New Batch_InvalidName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code is Bad Request\", ()=> {\r",
									"    pm.response.to.have.status(\"Bad Request\")\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains expected error details\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"success\", false);\r",
									"    pm.expect(jsonData).to.have.property(\"message\", \"batchDescription must begin with alphabet and can contain only alphanumeric characters\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"\",\r\n  \"batchName\": \"March24-API Warriors-SDET-SDET05-005\",\r\n  \"batchNoOfClasses\": 5,\r\n  \"batchStatus\": \"Active\",\r\n  \"programId\": 16668\r\n }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/batches",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"batches"
							]
						}
					},
					"response": [
						{
							"name": "Create New Batch",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"batchDescription\": \"This Batch Started from Jan2022\",\r\n  \"batchName\": \"March24-API Warriors-DA-DA01-001\",\r\n  \"batchNoOfClasses\": 10,\r\n  \"batchStatus\": \"Active\",\r\n  \"programId\": 16673\r\n }\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}/batches",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"batches"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1709857789&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=KFY7EsNhHBfDZ21vt74tDhxUFWQX27n63yW9oMDohb8%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1709857789&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=KFY7EsNhHBfDZ21vt74tDhxUFWQX27n63yW9oMDohb8%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Fri, 08 Mar 2024 00:29:50 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"batchId\": 8709,\n    \"batchName\": \"March24-API Warriors-SDET-SDET05-005\",\n    \"batchDescription\": \"This Batch Started from Feb2022\",\n    \"batchStatus\": \"Active\",\n    \"batchNoOfClasses\": 5,\n    \"programId\": 16668,\n    \"programName\": \"March24-API Warriors-SDET-005\"\n}"
						},
						{
							"name": "Create New Batch",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"batchDescription\": \"This Batch Started from Jan2022\",\r\n  \"batchName\": \"March24-API Warriors-DA-DA01-001\",\r\n  \"batchNoOfClasses\": 10,\r\n  \"batchStatus\": \"Active\",\r\n  \"programId\": 16673\r\n }\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}/batches",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"batches"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1709858208&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=37OduxLhdjldXcvP19qWaqg841hLubsCeQTiG7qntlw%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1709858208&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=37OduxLhdjldXcvP19qWaqg841hLubsCeQTiG7qntlw%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Fri, 08 Mar 2024 00:36:48 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"batchId\": 8711,\n    \"batchName\": \"March24-API Warriors-DA-DA01-001\",\n    \"batchDescription\": \"This Batch Started from Jan2022\",\n    \"batchStatus\": \"Active\",\n    \"batchNoOfClasses\": 10,\n    \"programId\": 16673,\n    \"programName\": \"March24-API Warriors-DA-001\"\n}"
						}
					]
				},
				{
					"name": "Batch_NS_Create New Batch_InvalidProgramId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is Not Found\", ()=> {\r",
									"    pm.response.to.have.status(\"Not Found\")\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains expected error details\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"success\", false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"This Batch Started from Feb2022\",\r\n  \"batchName\": \"March24-API Warriors-SDET-SDET05-005\",\r\n  \"batchNoOfClasses\": 5,\r\n  \"batchStatus\": \"Active\",\r\n  \"programId\": 1\r\n }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/batches",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"batches"
							]
						}
					},
					"response": [
						{
							"name": "Create New Batch",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"batchDescription\": \"This Batch Started from Jan2022\",\r\n  \"batchName\": \"March24-API Warriors-DA-DA01-001\",\r\n  \"batchNoOfClasses\": 10,\r\n  \"batchStatus\": \"Active\",\r\n  \"programId\": 16673\r\n }\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}/batches",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"batches"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1709857789&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=KFY7EsNhHBfDZ21vt74tDhxUFWQX27n63yW9oMDohb8%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1709857789&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=KFY7EsNhHBfDZ21vt74tDhxUFWQX27n63yW9oMDohb8%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Fri, 08 Mar 2024 00:29:50 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"batchId\": 8709,\n    \"batchName\": \"March24-API Warriors-SDET-SDET05-005\",\n    \"batchDescription\": \"This Batch Started from Feb2022\",\n    \"batchStatus\": \"Active\",\n    \"batchNoOfClasses\": 5,\n    \"programId\": 16668,\n    \"programName\": \"March24-API Warriors-SDET-005\"\n}"
						},
						{
							"name": "Create New Batch",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"batchDescription\": \"This Batch Started from Jan2022\",\r\n  \"batchName\": \"March24-API Warriors-DA-DA01-001\",\r\n  \"batchNoOfClasses\": 10,\r\n  \"batchStatus\": \"Active\",\r\n  \"programId\": 16673\r\n }\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}/batches",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"batches"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1709858208&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=37OduxLhdjldXcvP19qWaqg841hLubsCeQTiG7qntlw%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1709858208&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=37OduxLhdjldXcvP19qWaqg841hLubsCeQTiG7qntlw%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Fri, 08 Mar 2024 00:36:48 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"batchId\": 8711,\n    \"batchName\": \"March24-API Warriors-DA-DA01-001\",\n    \"batchDescription\": \"This Batch Started from Jan2022\",\n    \"batchStatus\": \"Active\",\n    \"batchNoOfClasses\": 10,\n    \"programId\": 16673,\n    \"programName\": \"March24-API Warriors-DA-001\"\n}"
						}
					]
				},
				{
					"name": "Batch_NS_Create New Batch_InvalidStatus",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code is Bad Request\", ()=> {\r",
									"    pm.response.to.have.status(\"Bad Request\")\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains expected error details\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"success\", false);\r",
									"    pm.expect(jsonData).to.have.property(\"message\", \"Invalid Status: must be Active or Inactive\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"This Batch Started from Feb2022\",\r\n  \"batchName\": \"March24-API Warriors-SDET-SDET05-005\",\r\n  \"batchNoOfClasses\": 5,\r\n  \"batchStatus\": \"5\",\r\n  \"programId\": 16668\r\n }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/batches",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"batches"
							]
						}
					},
					"response": [
						{
							"name": "Create New Batch",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"batchDescription\": \"This Batch Started from Jan2022\",\r\n  \"batchName\": \"March24-API Warriors-DA-DA01-001\",\r\n  \"batchNoOfClasses\": 10,\r\n  \"batchStatus\": \"Active\",\r\n  \"programId\": 16673\r\n }\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}/batches",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"batches"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1709857789&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=KFY7EsNhHBfDZ21vt74tDhxUFWQX27n63yW9oMDohb8%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1709857789&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=KFY7EsNhHBfDZ21vt74tDhxUFWQX27n63yW9oMDohb8%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Fri, 08 Mar 2024 00:29:50 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"batchId\": 8709,\n    \"batchName\": \"March24-API Warriors-SDET-SDET05-005\",\n    \"batchDescription\": \"This Batch Started from Feb2022\",\n    \"batchStatus\": \"Active\",\n    \"batchNoOfClasses\": 5,\n    \"programId\": 16668,\n    \"programName\": \"March24-API Warriors-SDET-005\"\n}"
						},
						{
							"name": "Create New Batch",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"batchDescription\": \"This Batch Started from Jan2022\",\r\n  \"batchName\": \"March24-API Warriors-DA-DA01-001\",\r\n  \"batchNoOfClasses\": 10,\r\n  \"batchStatus\": \"Active\",\r\n  \"programId\": 16673\r\n }\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}/batches",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"batches"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1709858208&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=37OduxLhdjldXcvP19qWaqg841hLubsCeQTiG7qntlw%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1709858208&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=37OduxLhdjldXcvP19qWaqg841hLubsCeQTiG7qntlw%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Fri, 08 Mar 2024 00:36:48 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"batchId\": 8711,\n    \"batchName\": \"March24-API Warriors-DA-DA01-001\",\n    \"batchDescription\": \"This Batch Started from Jan2022\",\n    \"batchStatus\": \"Active\",\n    \"batchNoOfClasses\": 10,\n    \"programId\": 16673,\n    \"programName\": \"March24-API Warriors-DA-001\"\n}"
						}
					]
				},
				{
					"name": "Batch_NS_Create New Batch_InvalidProgramId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code is Bad Request\", ()=> {\r",
									"    pm.response.to.have.status(\"Bad Request\")\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains expected error details\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"success\", false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"This Batch Started from Feb2022\",\r\n  \"batchName\": \"March24-API Warriors-SDET-SDET05-005\",\r\n  \"batchNoOfClasses\": 0,\r\n  \"batchStatus\": \"Active\",\r\n  \"programId\": 16668\r\n }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/batches",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"batches"
							]
						}
					},
					"response": [
						{
							"name": "Create New Batch",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"batchDescription\": \"This Batch Started from Jan2022\",\r\n  \"batchName\": \"March24-API Warriors-DA-DA01-001\",\r\n  \"batchNoOfClasses\": 10,\r\n  \"batchStatus\": \"Active\",\r\n  \"programId\": 16673\r\n }\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}/batches",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"batches"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1709857789&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=KFY7EsNhHBfDZ21vt74tDhxUFWQX27n63yW9oMDohb8%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1709857789&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=KFY7EsNhHBfDZ21vt74tDhxUFWQX27n63yW9oMDohb8%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Fri, 08 Mar 2024 00:29:50 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"batchId\": 8709,\n    \"batchName\": \"March24-API Warriors-SDET-SDET05-005\",\n    \"batchDescription\": \"This Batch Started from Feb2022\",\n    \"batchStatus\": \"Active\",\n    \"batchNoOfClasses\": 5,\n    \"programId\": 16668,\n    \"programName\": \"March24-API Warriors-SDET-005\"\n}"
						},
						{
							"name": "Create New Batch",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"batchDescription\": \"This Batch Started from Jan2022\",\r\n  \"batchName\": \"March24-API Warriors-DA-DA01-001\",\r\n  \"batchNoOfClasses\": 10,\r\n  \"batchStatus\": \"Active\",\r\n  \"programId\": 16673\r\n }\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}/batches",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"batches"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1709858208&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=37OduxLhdjldXcvP19qWaqg841hLubsCeQTiG7qntlw%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1709858208&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=37OduxLhdjldXcvP19qWaqg841hLubsCeQTiG7qntlw%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Fri, 08 Mar 2024 00:36:48 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"batchId\": 8711,\n    \"batchName\": \"March24-API Warriors-DA-DA01-001\",\n    \"batchDescription\": \"This Batch Started from Jan2022\",\n    \"batchStatus\": \"Active\",\n    \"batchNoOfClasses\": 10,\n    \"programId\": 16673,\n    \"programName\": \"March24-API Warriors-DA-001\"\n}"
						}
					]
				},
				{
					"name": "Batch_NS_Create New Batch_wrongEndPoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code is Bad Request\", ()=> {\r",
									"    pm.response.to.have.status(\"Bad Request\")\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains expected error details\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"success\", false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"This Batch Started from Feb2022\",\r\n  \"batchName\": \"March24-API Warriors-SDET-SDET05-005\",\r\n  \"batchNoOfClasses\": 0,\r\n  \"batchStatus\": \"Active\",\r\n  \"programId\": 16668\r\n }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/batche",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"batche"
							]
						}
					},
					"response": [
						{
							"name": "Create New Batch",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"batchDescription\": \"This Batch Started from Jan2022\",\r\n  \"batchName\": \"March24-API Warriors-DA-DA01-001\",\r\n  \"batchNoOfClasses\": 10,\r\n  \"batchStatus\": \"Active\",\r\n  \"programId\": 16673\r\n }\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}/batches",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"batches"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1709857789&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=KFY7EsNhHBfDZ21vt74tDhxUFWQX27n63yW9oMDohb8%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1709857789&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=KFY7EsNhHBfDZ21vt74tDhxUFWQX27n63yW9oMDohb8%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Fri, 08 Mar 2024 00:29:50 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"batchId\": 8709,\n    \"batchName\": \"March24-API Warriors-SDET-SDET05-005\",\n    \"batchDescription\": \"This Batch Started from Feb2022\",\n    \"batchStatus\": \"Active\",\n    \"batchNoOfClasses\": 5,\n    \"programId\": 16668,\n    \"programName\": \"March24-API Warriors-SDET-005\"\n}"
						},
						{
							"name": "Create New Batch",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"batchDescription\": \"This Batch Started from Jan2022\",\r\n  \"batchName\": \"March24-API Warriors-DA-DA01-001\",\r\n  \"batchNoOfClasses\": 10,\r\n  \"batchStatus\": \"Active\",\r\n  \"programId\": 16673\r\n }\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}/batches",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"batches"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1709858208&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=37OduxLhdjldXcvP19qWaqg841hLubsCeQTiG7qntlw%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1709858208&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=37OduxLhdjldXcvP19qWaqg841hLubsCeQTiG7qntlw%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Fri, 08 Mar 2024 00:36:48 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"batchId\": 8711,\n    \"batchName\": \"March24-API Warriors-DA-DA01-001\",\n    \"batchDescription\": \"This Batch Started from Jan2022\",\n    \"batchStatus\": \"Active\",\n    \"batchNoOfClasses\": 10,\n    \"programId\": 16673,\n    \"programName\": \"March24-API Warriors-DA-001\"\n}"
						}
					]
				},
				{
					"name": "Batch_NS_Get Batch By Batch_Id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Status code is Bad Request\", ()=> {\r",
									"    pm.response.to.have.status(\"Not Found\")\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains expected error details\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"success\", false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}/batches/batchId/:batchId",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"batches",
								"batchId",
								":batchId"
							],
							"variable": [
								{
									"key": "batchId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Batch_NS_Get Batch By Program_Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Status code is Bad Request\", ()=> {\r",
									"    pm.response.to.have.status(\"Not Found\")\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains expected error details\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"success\", false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}/batches/program/:programId",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"batches",
								"program",
								":programId"
							],
							"variable": [
								{
									"key": "programId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Batch_NS_Get Batch By Batch_Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Status code is Bad Request\", ()=> {\r",
									"    pm.response.to.have.status(\"Not Found\")\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains expected error details\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"success\", false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}/batches/batchName/:batchName",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"batches",
								"batchName",
								":batchName"
							],
							"variable": [
								{
									"key": "batchName",
									"value": "March24-API Warriors-SDET-DA108-108"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Batch_NS_Get Batch By WrongEndPoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code is Bad Request\", ()=> {\r",
									"    pm.response.to.have.status(\"Bad Request\")\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains expected error details\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"success\", false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}/abc",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"abc"
							]
						}
					},
					"response": []
				},
				{
					"name": "Batch_NS_Delete Batch By Batch_Id",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}/batches/:batchId",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"batches",
								":batchId"
							],
							"variable": [
								{
									"key": "batchId",
									"value": "8"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Batch_NS_Delete Batch By Batch_Id",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}/batches/:batchId",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"batches",
								":batchId"
							],
							"variable": [
								{
									"key": "batchId",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Batch_NS_Delete Batch By existing Batch_Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Status code is Bad Request\", ()=> {\r",
									"    pm.response.to.have.status(\"Not Found\")\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains expected error details\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"success\", false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}/batches/:batchId",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"batches",
								":batchId"
							],
							"variable": [
								{
									"key": "batchId",
									"value": "8711"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Batch_NS_Update Batch By BatchStatus",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code is Bad Request\", ()=> {\r",
									"    pm.response.to.have.status(\"Bad Request\")\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains expected error details\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"success\", false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"batchId\": 8787,\r\n    \"batchName\": \"fre\",\r\n    \"batchDescription\": \"This Batch is for Data Science\",\r\n    \"batchStatus\": \"On\",\r\n    \"batchNoOfClasses\": 6,\r\n    \"programId\": 1636,\r\n    \"programName\": \"Program0016\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/batches/:batchId",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"batches",
								":batchId"
							],
							"variable": [
								{
									"key": "batchId",
									"value": "8787"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Batch_NS_Update Batch By NumberOfClasses",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code is Bad Request\", ()=> {\r",
									"    pm.response.to.have.status(\"Bad Request\")\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains expected error details\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"success\", false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"batchId\": 8787,\r\n    \"batchName\": \"fre\",\r\n    \"batchDescription\": \"This Batch is for Data Science\",\r\n    \"batchStatus\": \"Active\",\r\n    \"batchNoOfClasses\": 0,\r\n    \"programId\": 1636,\r\n    \"programName\": \"Program0016\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/batches/:batchId",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"batches",
								":batchId"
							],
							"variable": [
								{
									"key": "batchId",
									"value": "8787"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Batch_NS_Update Batch By program_Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Status code is Bad Request\", ()=> {\r",
									"    pm.response.to.have.status(\"Not Found\")\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains expected error details\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"success\", false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"batchId\": 8787,\r\n    \"batchName\": \"fre\",\r\n    \"batchDescription\": \"This Batch is for Data Science\",\r\n    \"batchStatus\": \"Active\",\r\n    \"batchNoOfClasses\": 5,\r\n    \"programId\": 1636,\r\n    \"programName\": \"Program0016\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/batches/:batchId",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"batches",
								":batchId"
							],
							"variable": [
								{
									"key": "batchId",
									"value": "8787"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Batch_NS_Update Batch By Batch_Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code is Bad Request\", ()=> {\r",
									"    pm.response.to.have.status(\"Bad Request\")\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains expected error details\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"success\", false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"This Batch is for Data Science\",\r\n  \"batchId\": 8787,\r\n  \"batchName\": \"\",\r\n  \"batchNoOfClasses\": 5,\r\n  \"batchStatus\": \"Active\",\r\n  \"programId\": 16346,\r\n  \"programName\": \"March24-API Warriors-SDET-SDET18-18\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/batches/:batchId",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"batches",
								":batchId"
							],
							"variable": [
								{
									"key": "batchId",
									"value": "8787"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Batch_NS_Update Batch By Batch_Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Status code is Bad Request\", ()=> {\r",
									"    pm.response.to.have.status(\"Not Found\")\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains expected error details\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"success\", false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"This Batch is for Data Science\",\r\n  \"batchId\": 101,\r\n  \"batchName\": \"March24-API Warriors-DA-DA18-18\",\r\n  \"batchNoOfClasses\": 5,\r\n  \"batchStatus\": \"Active\",\r\n  \"programId\": 16346,\r\n  \"programName\": \"March24-API Warriors-SDET-SDET18-18\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/batches/:batchId",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"batches",
								":batchId"
							],
							"variable": [
								{
									"key": "batchId",
									"value": "101"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Batch_NS_Update Batch By Batch_Id with WorngEndpoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code is Bad Request\", ()=> {\r",
									"    pm.response.to.have.status(\"Bad Request\")\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains expected error details\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"success\", false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"This Batch is for Data Science\",\r\n  \"batchId\": 101,\r\n  \"batchName\": \"March24-API Warriors-DA-DA18-18\",\r\n  \"batchNoOfClasses\": 5,\r\n  \"batchStatus\": \"Active\",\r\n  \"programId\": 16346,\r\n  \"programName\": \"March24-API Warriors-SDET-SDET18-18\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/batches/:batch",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"batches",
								":batch"
							],
							"variable": [
								{
									"key": "batch",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "UserRole_DDT",
			"item": [
				{
					"name": "roleGetAll",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Response body test",
									"var responseBody = pm.response.json();",
									"",
									"// Test if the response status code is 200 OK",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type header is present\", function() {",
									"  pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Content-Type header is application/json\", function() {",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"});",
									"",
									"pm.test(\"Response time is less than 600ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});",
									"",
									"pm.test(\"Response body is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"// Test if the response body is not empty",
									"pm.test(\"Response body is not empty\", function () {",
									"    pm.expect(responseBody).to.not.be.empty;",
									"});",
									"",
									"// Test if the response body is an array",
									"pm.test(\"Response body is an array\", function () {",
									"    pm.expect(responseBody).to.be.an('array');",
									"});",
									"",
									"// Test if each user object contains the required fields",
									"pm.test(\"Each user object contains required fields\", function () {",
									"    responseBody.forEach(function(user) {",
									"        pm.expect(user).to.have.property('userId');",
									"        pm.expect(user).to.have.property('roleId');",
									"        pm.expect(user).to.have.property('programId');",
									"        pm.expect(user).to.have.property('batchId');",
									"        pm.expect(user).to.have.property('userRoleProgramBatchStatus');",
									"    });",
									"});",
									"",
									"//Schema validation",
									"var schema = {",
									"  \"type\": \"array\",",
									"  \"items\": [",
									"    {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"batchId\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"programId\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"roleId\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"userId\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"userRoleProgramBatchStatus\": {",
									"          \"type\": \"string\"",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"batchId\",",
									"        \"programId\",",
									"        \"roleId\",",
									"        \"userId\",",
									"        \"userRoleProgramBatchStatus\"",
									"      ]",
									"    }",
									"  ]",
									"};",
									"",
									"pm.test(\"Response body schema is valid\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const token = pm.environment.get(\"BearerToken\");",
									"if (token) {",
									"    pm.request.headers.add({",
									"        key: \"Authorization\",",
									"        value: `Bearer ${token}`",
									"    });",
									"} else {",
									"    console.error(\"Bearer token not found in environment variables.\");",
									"}",
									"var data = pm.iterationData.toObject();",
									"var endpoint = data.Endpoint;",
									"console.log(\"Endpoint:\", endpoint);",
									"if (endpoint === '/userRoleProgramBatchMap') {",
									"pm.request.url  = pm.variables.replaceIn(\"{{BaseurlLMS}}\"+endpoint);",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseurlLMS}}",
							"host": [
								"{{BaseurlLMS}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "roleByuserId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Response body test",
									"var responseBody = pm.response.json();",
									"",
									"// Test if the userId in the response body matches the userId from the environment",
									"pm.test(\"User ID in response matches the expected value\", function () {",
									"    var userIdFromResponse = responseBody.userId;",
									"    pm.expect(userIdFromResponse).to.equal(pm.environment.get(\"userId\"));",
									"});",
									"",
									"// Test if the response status code is 200 OK",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 600ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});",
									"",
									"pm.test(\"Response body is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"// Test if the response body is not empty",
									"pm.test(\"Response body is not empty\", function () {",
									"    pm.expect(responseBody).to.not.be.empty;",
									"});",
									"",
									"// Test if the response body contains details for the specific user ID ",
									"pm.test(\"User details for the specific user ID are present\", function () {",
									"    pm.expect(responseBody).to.have.property('userId');",
									"    pm.expect(responseBody).to.have.property('roleId');",
									"    pm.expect(responseBody).to.have.property('programId');",
									"    pm.expect(responseBody).to.have.property('batchId');",
									"    pm.expect(responseBody).to.have.property('userRoleProgramBatchStatus');",
									"});",
									"",
									"//Schema validation",
									"var schema = {",
									"  \"type\": \"array\",",
									"  \"items\": [",
									"    {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"batchId\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"programId\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"roleId\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"userId\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"userRoleProgramBatchStatus\": {",
									"          \"type\": \"string\"",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"batchId\",",
									"        \"programId\",",
									"        \"roleId\",",
									"        \"userId\",",
									"        \"userRoleProgramBatchStatus\"",
									"      ]",
									"    }",
									"  ]",
									"};",
									"pm.test(\"Response body schema is valid\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const token = pm.environment.get(\"BearerToken\");",
									"if (token) {",
									"    pm.request.headers.add({",
									"        key: \"Authorization\",",
									"        value: `Bearer ${token}`",
									"    });",
									"} else {",
									"    console.error(\"Bearer token not found in environment variables.\");",
									"}",
									"",
									"var data = pm.iterationData.toObject();",
									"var endpoint = data.Endpoint;",
									"var userId = data.userId;",
									"console.log(\"Endpoint:\", endpoint);",
									"console.log(\"input userId\",userId);",
									"console.log(\"BaseurlLMS value:\", pm.variables.get(\"BaseurlLMS\"));",
									"pm.request.url  = pm.variables.replaceIn(\"{{BaseurlLMS}}/userRoleProgramBatchMap/\" + userId);",
									"console.log(\"Updated URL:\",pm.request.url);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseurlLMS}}",
							"host": [
								"{{BaseurlLMS}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "roleByuserId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 600ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});",
									"",
									"pm.test(\"Response body is valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"//Schema validation",
									"var schema = {",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"message\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"success\": {",
									"      \"type\": \"boolean\"",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"message\",",
									"    \"success\"",
									"  ]",
									"};",
									"pm.test(\"Response body schema is valid\", function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									" var data = pm.iterationData.toObject();",
									"var endpoint = data.Endpoint;",
									"if (pm.request.method === \"DELETE\" && endpoint === \"/userRoleProgramBatchMap/deleteAll/{userId}\") {",
									"if(pm.response.code===200){",
									"pm.test(\"Status code is 200 \", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"    pm.test(\"Body matches string\", function () {",
									"        pm.expect(pm.response.text()).to.include(\"Deleted All Programs/Batches assigned to User ID\");",
									"    });",
									"});",
									"} else if(pm.response.code===404){",
									"    pm.test(\"Status code is 404 \", function () {",
									"    pm.response.to.have.status(404);",
									"    pm.test(\"Body matches string\", function () {",
									"        pm.expect(pm.response.text()).to.include(\"UserRoleProgramBatchMap not found with id\",  \"success: false\");",
									"    });",
									"});",
									"}",
									"else {",
									"    pm.test(\"Unexpected status code\", function () {",
									"        pm.expect.fail(\"Unexpected status code: \" + pm.response.code);",
									"    });",
									"}",
									"pm.test(\"Content-Type header is application/json\", function() {",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"});",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var data = pm.iterationData.toObject();",
									"var endpoint = data.Endpoint;",
									"console.log(\"Endpoint:\", endpoint);",
									"if (endpoint === '/userRoleProgramBatchMap/deleteAll/{userId}') {",
									"var userId = data.userId;",
									"pm.request.url  = pm.variables.replaceIn(\"{{BaseurlLMS}}/userRoleProgramBatchMap/deleteAll/\" + userId);",
									"}",
									"const token = pm.environment.get(\"BearerToken\");",
									"if (token) {",
									"    pm.request.headers.add({",
									"        key: \"Authorization\",",
									"        value: `Bearer ${token}`",
									"    });",
									"} else {",
									"    console.error(\"Bearer token not found in environment variables.\");",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BaseurlLMS}}",
							"host": [
								"{{BaseurlLMS}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "USERModule2",
			"item": [
				{
					"name": "Count of A/IN-A",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const token = pm.environment.get(\"BearerToken\");\r",
									"if (token) {\r",
									"    pm.request.headers.add({\r",
									"        key: \"Authorization\",\r",
									"        value: `Bearer ${token}`\r",
									"    });\r",
									"} else {\r",
									"    console.error(\"Bearer token not found in environment variables.\");\r",
									"}\r",
									"var data = pm.iterationData.toObject();\r",
									"var endpoint = data.Endpoint;\r",
									"console.log(\"Endpoint:\", endpoint);\r",
									"if (endpoint === '/allPrograms') {\r",
									"pm.request.url  = pm.variables.replaceIn(\"{{BaseurlLMS}}\"+endpoint);\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 600ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(600);\r",
									"});\r",
									"pm.test(\"set the authentication\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    var Token=jsonData.token;\r",
									"    pm.environment.set(\"Token\",Token);\r",
									"});\r",
									"jsonData.forEach(function(item) {\r",
									"    pm.test(\"Check data type for 'status' property\", function () {\r",
									"        pm.expect(item.status).to.be.a('string');\r",
									"    });\r",
									"    pm.test(\"Check data type for 'count' property\", function () {\r",
									"        pm.expect(item.count).to.be.a('number');\r",
									"    });\r",
									"    });\r",
									"    pm.test(\"Content-Type header is present\", function() {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"pm.test(\"Content-Type header is application/json\", function() {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseurlLMSl}}",
							"host": [
								"{{BaseurlLMSl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "user by Program-Batches",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const token = pm.environment.get(\"BearerToken\");\r",
									"if (token) {\r",
									"    pm.request.headers.add({\r",
									"        key: \"Authorization\",\r",
									"        value: `Bearer ${token}`\r",
									"    });\r",
									"} else {\r",
									"    console.error(\"Bearer token not found in environment variables.\");\r",
									"}\r",
									"var data = pm.iterationData.toObject();\r",
									"var endpoint = data.Endpoint;\r",
									"var batchId = data.batchId;\r",
									"console.log(\"Endpoint:\", endpoint);\r",
									"console.log(\"input batchId\",batchId);\r",
									"console.log(\"BaseurlLMS value:\", pm.variables.get(\"BaseurlLMS\"));\r",
									"pm.request.url  = pm.variables.replaceIn(\"{{BaseurlLMS}}/users/programBatch/\" + batchId);\r",
									"console.log(\"Updated URL:\",pm.request.url);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 600ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(600);\r",
									"});\r",
									"pm.test(\"set the authentication\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    var Token=jsonData.token;\r",
									"    pm.environment.set(\"Token\",Token);\r",
									"});\r",
									"jsonData.forEach(function(item) {\r",
									"    pm.test(\"Check data type for 'status' property\", function () {\r",
									"        pm.expect(item.status).to.be.a('string');\r",
									"    });\r",
									"    pm.test(\"Check data type for 'count' property\", function () {\r",
									"        pm.expect(item.count).to.be.a('number');\r",
									"    });\r",
									"    });\r",
									"    pm.test(\"Content-Type header is present\", function() {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"pm.test(\"Content-Type header is application/json\", function() {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"pm.test(\"Response body has correct data types\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"  \"type\": \"array\",\r",
									"  \"items\": {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"      \"userId\": { \"type\": \"string\" },\r",
									"      \"userFirstName\": { \"type\": \"string\" },\r",
									"      \"userLastName\": { \"type\": \"string\" },\r",
									"      \"userMiddleName\": { \"type\": \"string\" },\r",
									"      \"userPhoneNumber\": { \"type\": \"integer\" },\r",
									"      \"userLocation\": { \"type\": \"string\" },\r",
									"      \"userTimeZone\": { \"type\": \"string\" },\r",
									"      \"userLinkedinUrl\": { \"type\": \"string\" },\r",
									"      \"userEduUg\": { \"type\": \"string\" },\r",
									"      \"userEduPg\": { \"type\": \"string\" },\r",
									"      \"userComments\": { \"type\": \"string\" },\r",
									"      \"userVisaStatus\": { \"type\": \"string\" },\r",
									"      \"userLoginEmail\": { \"type\": [\"string\", \"null\"] }\r",
									"    },\r",
									"    \"required\": [\r",
									"      \"userId\",\r",
									"      \"userFirstName\",\r",
									"      \"userLastName\",\r",
									"      \"userMiddleName\",\r",
									"      \"userPhoneNumber\",\r",
									"      \"userLocation\",\r",
									"      \"userTimeZone\",\r",
									"      \"userLinkedinUrl\",\r",
									"      \"userEduUg\",\r",
									"      \"userEduPg\",\r",
									"      \"userComments\",\r",
									"      \"userVisaStatus\",\r",
									"      \"userLoginEmail\"\r",
									"    ]\r",
									"  }\r",
									"};"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseurlLMSl}}",
							"host": [
								"{{BaseurlLMSl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "user by Program-Id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const token = pm.environment.get(\"BearerToken\");\r",
									"if (token) {\r",
									"    pm.request.headers.add({\r",
									"        key: \"Authorization\",\r",
									"        value: `Bearer ${token}`\r",
									"    });\r",
									"} else {\r",
									"    console.error(\"Bearer token not found in environment variables.\");\r",
									"}\r",
									"var data = pm.iterationData.toObject();\r",
									"var endpoint = data.Endpoint;\r",
									"var programId = data.programId;\r",
									"console.log(\"Endpoint:\", endpoint);\r",
									"console.log(\"input batchId\",programId);\r",
									"console.log(\"BaseurlLMS value:\", pm.variables.get(\"BaseurlLMS\"));\r",
									"pm.request.url  = pm.variables.replaceIn(\"{{BaseurlLMS}}/programs/\" + batchId);\r",
									"console.log(\"Updated URL:\",pm.request.url);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 600ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(600);\r",
									"});\r",
									"pm.test(\"set the authentication\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    var Token=jsonData.token;\r",
									"    pm.environment.set(\"Token\",Token);\r",
									"});\r",
									"jsonData.forEach(function(item) {\r",
									"    pm.test(\"Check data type for 'status' property\", function () {\r",
									"        pm.expect(item.status).to.be.a('string');\r",
									"    });\r",
									"    pm.test(\"Check data type for 'count' property\", function () {\r",
									"        pm.expect(item.count).to.be.a('number');\r",
									"    });\r",
									"    });\r",
									"    pm.test(\"Content-Type header is present\", function() {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"pm.test(\"Content-Type header is application/json\", function() {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"pm.test(\"Response body has correct data types\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"  \"type\": \"array\",\r",
									"  \"items\": {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"      \"userId\": { \"type\": \"string\" },\r",
									"      \"userFirstName\": { \"type\": \"string\" },\r",
									"      \"userLastName\": { \"type\": \"string\" },\r",
									"      \"userMiddleName\": { \"type\": \"string\" },\r",
									"      \"userPhoneNumber\": { \"type\": \"integer\" },\r",
									"      \"userLocation\": { \"type\": \"string\" },\r",
									"      \"userTimeZone\": { \"type\": \"string\" },\r",
									"      \"userLinkedinUrl\": { \"type\": \"string\" },\r",
									"      \"userEduUg\": { \"type\": \"string\" },\r",
									"      \"userEduPg\": { \"type\": \"string\" },\r",
									"      \"userComments\": { \"type\": \"string\" },\r",
									"      \"userVisaStatus\": { \"type\": \"string\" },\r",
									"      \"userLoginEmail\": { \"type\": [\"string\", \"null\"] }\r",
									"    },\r",
									"    \"required\": [\r",
									"      \"userId\",\r",
									"      \"userFirstName\",\r",
									"      \"userLastName\",\r",
									"      \"userMiddleName\",\r",
									"      \"userPhoneNumber\",\r",
									"      \"userLocation\",\r",
									"      \"userTimeZone\",\r",
									"      \"userLinkedinUrl\",\r",
									"      \"userEduUg\",\r",
									"      \"userEduPg\",\r",
									"      \"userComments\",\r",
									"      \"userVisaStatus\",\r",
									"      \"userLoginEmail\"\r",
									"    ]\r",
									"  }\r",
									"};"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseurlLMSl}}",
							"host": [
								"{{BaseurlLMSl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "user by RoleId",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const token = pm.environment.get(\"BearerToken\");\r",
									"if (token) {\r",
									"    pm.request.headers.add({\r",
									"        key: \"Authorization\",\r",
									"        value: `Bearer ${token}`\r",
									"    });\r",
									"} else {\r",
									"    console.error(\"Bearer token not found in environment variables.\");\r",
									"}\r",
									"var data = pm.iterationData.toObject();\r",
									"var endpoint = data.Endpoint;\r",
									"var programId = data.programId;\r",
									"console.log(\"Endpoint:\", endpoint);\r",
									"console.log(\"input batchId\",programId);\r",
									"console.log(\"BaseurlLMS value:\", pm.variables.get(\"BaseurlLMS\"));\r",
									"pm.request.url  = pm.variables.replaceIn(\"{{BaseurlLMS}}/users/roles/{roleId}\");\r",
									"console.log(\"Updated URL:\",pm.request.url);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 600ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(600);\r",
									"});\r",
									"pm.test(\"set the authentication\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    var Token=jsonData.token;\r",
									"    pm.environment.set(\"Token\",Token);\r",
									"});\r",
									"jsonData.forEach(function(item) {\r",
									"    pm.test(\"Check data type for 'status' property\", function () {\r",
									"        pm.expect(item.status).to.be.a('string');\r",
									"    });\r",
									"    pm.test(\"Check data type for 'count' property\", function () {\r",
									"        pm.expect(item.count).to.be.a('number');\r",
									"    });\r",
									"    });\r",
									"    pm.test(\"Content-Type header is present\", function() {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"pm.test(\"Content-Type header is application/json\", function() {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"pm.test(\"Response body has correct data types\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"  \"type\": \"array\",\r",
									"  \"items\": {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"      \"userId\": { \"type\": \"string\" },\r",
									"      \"userFirstName\": { \"type\": \"string\" },\r",
									"      \"userLastName\": { \"type\": \"string\" },\r",
									"      \"userMiddleName\": { \"type\": \"string\" },\r",
									"      \"userPhoneNumber\": { \"type\": \"integer\" },\r",
									"      \"userLocation\": { \"type\": \"string\" },\r",
									"      \"userTimeZone\": { \"type\": \"string\" },\r",
									"      \"userLinkedinUrl\": { \"type\": \"string\" },\r",
									"      \"userEduUg\": { \"type\": \"string\" },\r",
									"      \"userEduPg\": { \"type\": \"string\" },\r",
									"      \"userComments\": { \"type\": \"string\" },\r",
									"      \"userVisaStatus\": { \"type\": \"string\" },\r",
									"      \"userLoginEmail\": { \"type\": [\"string\", \"null\"] }\r",
									"    },\r",
									"    \"required\": [\r",
									"      \"userId\",\r",
									"      \"userFirstName\",\r",
									"      \"userLastName\",\r",
									"      \"userMiddleName\",\r",
									"      \"userPhoneNumber\",\r",
									"      \"userLocation\",\r",
									"      \"userTimeZone\",\r",
									"      \"userLinkedinUrl\",\r",
									"      \"userEduUg\",\r",
									"      \"userEduPg\",\r",
									"      \"userComments\",\r",
									"      \"userVisaStatus\",\r",
									"      \"userLoginEmail\"\r",
									"    ]\r",
									"  }\r",
									"};"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseurlLMSl}}",
							"host": [
								"{{BaseurlLMSl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "User by RoleId V2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const token = pm.environment.get(\"BearerToken\");\r",
									"if (token) {\r",
									"    pm.request.headers.add({\r",
									"        key: \"Authorization\",\r",
									"        value: `Bearer ${token}`\r",
									"    });\r",
									"} else {\r",
									"    console.error(\"Bearer token not found in environment variables.\");\r",
									"}\r",
									"var data = pm.iterationData.toObject();\r",
									"var endpoint = data.Endpoint;\r",
									"var programId = data.programId;\r",
									"console.log(\"Endpoint:\", endpoint);\r",
									"console.log(\"input batchId\",programId);\r",
									"console.log(\"BaseurlLMS value:\", pm.variables.get(\"BaseurlLMS\"));\r",
									"pm.request.url  = pm.variables.replaceIn(\"{{BaseurlLMS}}/v2/users\");\r",
									"console.log(\"Updated URL:\",pm.request.url);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 600ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(600);\r",
									"});\r",
									"pm.test(\"set the authentication\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    var Token=jsonData.token;\r",
									"    pm.environment.set(\"Token\",Token);\r",
									"});\r",
									"jsonData.forEach(function(item) {\r",
									"    pm.test(\"Check data type for 'status' property\", function () {\r",
									"        pm.expect(item.status).to.be.a('string');\r",
									"    });\r",
									"    pm.test(\"Check data type for 'count' property\", function () {\r",
									"        pm.expect(item.count).to.be.a('number');\r",
									"    });\r",
									"    });\r",
									"    pm.test(\"Content-Type header is present\", function() {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"pm.test(\"Content-Type header is application/json\", function() {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"pm.test(\"Response body has correct data types\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"  \"type\": \"array\",\r",
									"  \"items\": {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"      \"userId\": { \"type\": \"string\" },\r",
									"      \"userFirstName\": { \"type\": \"string\" },\r",
									"      \"userLastName\": { \"type\": \"string\" },\r",
									"      \"userMiddleName\": { \"type\": \"string\" },\r",
									"      \"userPhoneNumber\": { \"type\": \"integer\" },\r",
									"      \"userLocation\": { \"type\": \"string\" },\r",
									"      \"userTimeZone\": { \"type\": \"string\" },\r",
									"      \"userLinkedinUrl\": { \"type\": \"string\" },\r",
									"      \"userEduUg\": { \"type\": \"string\" },\r",
									"      \"userEduPg\": { \"type\": \"string\" },\r",
									"      \"userComments\": { \"type\": \"string\" },\r",
									"      \"userVisaStatus\": { \"type\": \"string\" },\r",
									"      \"userLoginEmail\": { \"type\": [\"string\", \"null\"] }\r",
									"    },\r",
									"    \"required\": [\r",
									"      \"userId\",\r",
									"      \"userFirstName\",\r",
									"      \"userLastName\",\r",
									"      \"userMiddleName\",\r",
									"      \"userPhoneNumber\",\r",
									"      \"userLocation\",\r",
									"      \"userTimeZone\",\r",
									"      \"userLinkedinUrl\",\r",
									"      \"userEduUg\",\r",
									"      \"userEduPg\",\r",
									"      \"userComments\",\r",
									"      \"userVisaStatus\",\r",
									"      \"userLoginEmail\"\r",
									"    ]\r",
									"  }\r",
									"};"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseurlLMSl}}",
							"host": [
								"{{BaseurlLMSl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update user",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const token = pm.environment.get(\"BearerToken\");\r",
									"if (token) {\r",
									"    pm.request.headers.add({\r",
									"        key: \"Authorization\",\r",
									"        value: `Bearer ${token}`\r",
									"    });\r",
									"} else {\r",
									"    console.error(\"Bearer token not found in environment variables.\");\r",
									"}\r",
									"var data = pm.iterationData.toObject();\r",
									"var endpoint = data.Endpoint;\r",
									"var programId = data.programId;\r",
									"console.log(\"Endpoint:\", endpoint);\r",
									"console.log(\"input batchId\",programId);\r",
									"console.log(\"BaseurlLMS value:\", pm.variables.get(\"BaseurlLMS\"));\r",
									"pm.request.url  = pm.variables.replaceIn(\"{{BaseurlLMS}}/users/{userId}\");\r",
									"console.log(\"Updated URL:\",pm.request.url);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 600ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(600);\r",
									"});\r",
									"pm.test(\"set the authentication\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    var Token=jsonData.token;\r",
									"    pm.environment.set(\"Token\",Token);\r",
									"});\r",
									"jsonData.forEach(function(item) {\r",
									"    pm.test(\"Check data type for 'status' property\", function () {\r",
									"        pm.expect(item.status).to.be.a('string');\r",
									"    });\r",
									"    pm.test(\"Check data type for 'count' property\", function () {\r",
									"        pm.expect(item.count).to.be.a('number');\r",
									"    });\r",
									"    });\r",
									"    pm.test(\"Content-Type header is present\", function() {\r",
									"  pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"pm.test(\"Content-Type header is application/json\", function() {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"pm.test(\"Response body has correct data types\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"  \"type\": \"array\",\r",
									"  \"items\": {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"      \"userId\": { \"type\": \"string\" },\r",
									"      \"userFirstName\": { \"type\": \"string\" },\r",
									"      \"userLastName\": { \"type\": \"string\" },\r",
									"      \"userMiddleName\": { \"type\": \"string\" },\r",
									"      \"userPhoneNumber\": { \"type\": \"integer\" },\r",
									"      \"userLocation\": { \"type\": \"string\" },\r",
									"      \"userTimeZone\": { \"type\": \"string\" },\r",
									"      \"userLinkedinUrl\": { \"type\": \"string\" },\r",
									"      \"userEduUg\": { \"type\": \"string\" },\r",
									"      \"userEduPg\": { \"type\": \"string\" },\r",
									"      \"userComments\": { \"type\": \"string\" },\r",
									"      \"userVisaStatus\": { \"type\": \"string\" },\r",
									"      \"userLoginEmail\": { \"type\": [\"string\", \"null\"] }\r",
									"    },\r",
									"    \"required\": [\r",
									"      \"userId\",\r",
									"      \"userFirstName\",\r",
									"      \"userLastName\",\r",
									"      \"userMiddleName\",\r",
									"      \"userPhoneNumber\",\r",
									"      \"userLocation\",\r",
									"      \"userTimeZone\",\r",
									"      \"userLinkedinUrl\",\r",
									"      \"userEduUg\",\r",
									"      \"userEduPg\",\r",
									"      \"userComments\",\r",
									"      \"userVisaStatus\",\r",
									"      \"userLoginEmail\"\r",
									"    ]\r",
									"  }\r",
									"};"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseurlLMSl}}",
							"host": [
								"{{BaseurlLMSl}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "USERModule1",
			"item": [
				{
					"name": "Positive",
					"item": [
						{
							"name": "Post  login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var endpoint = data.Endpoint;\r",
											"if (pm.request.method === \"POST\" && endpoint === \"/login\") {\r",
											"\r",
											"pm.test(\"set the authentication\", function () {\r",
											"    \r",
											"    const jsonData = pm.response.json();\r",
											"    var bodytoken=jsonData.token;\r",
											"    pm.environment.set(\"BearerToken\",bodytoken);\r",
											"    \r",
											"});\r",
											"        console.log(\"Test already executed for /login endpoint.\");\r",
											"    }\r",
											"else {\r",
											"    console.log(\"Current request is not for /login endpoint.\");\r",
											"}\r",
											"\r",
											"if(pm.response.code===201){\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"            pm.response.to.have.status(200);\r",
											"        });}\r",
											"        \r",
											"else if(pm.response.code=== 400){\r",
											"    pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});}\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var data = pm.iterationData.toObject();\r",
											"\r",
											"var endpoint = data.Endpoint;\r",
											"\r",
											"if (endpoint === '/login') {\r",
											"var password = data.loginpassword;\r",
											"var userLoginEmailId = data.userloginEmailid;\r",
											"\r",
											"pm.environment.set(\"password\", loginpassword);\r",
											"pm.environment.set(\"loginEmail\", userloginEmailid);\r",
											"pm.request.url  = pm.variables.replaceIn(\"{{BaseurlLMS}}\" + endpoint);\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"{{loginpassword}}\",\r\n  \"userLoginEmailId\": \"{{userloginEmailid}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}",
									"host": [
										"{{BaseURL}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Admin User - Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.iterationData.toObject();\r",
											"var endpoint = data.Endpoint;\r",
											"var userComments = data.userComments;\r",
											"var userEduPg  = data.userEduPg;\r",
											"var userEduUg  = data.userEduUg;\r",
											"var userFirstName  = data.userFirstName;\r",
											"var userId  = data.userId;\r",
											"var userLastName  = data.userLastName;\r",
											"var userLinkedinUrl  = data.userLinkedinUrl;\r",
											"var userLocation  = data.userLocation;\r",
											"var loginstatus  = data.loginstatus;\r",
											"var password  = data.password;\r",
											"var roleIds  = data.roleIds;\r",
											"var status  = data.status;\r",
											"var userLoginEmail  = data.userLoginEmail;\r",
											"var userMiddleName  = data.userMiddleName;\r",
											"var userPhoneNumber  = data.userPhoneNumber;\r",
											"var roleId  = data.roleId;\r",
											"var userRoleStatus  = data.userRoleStatus;\r",
											"var userTimeZone  = data.userTimeZone;\r",
											"var userVisaStatus  = data.userVisaStatus;\r",
											"\r",
											"//Test the responce code is 201\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"// Test for response time to be within 600ms\r",
											"pm.test(\"Response time is less than 600ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(600);\r",
											"});\r",
											"\r",
											"//Test for the response body is a JSON\r",
											"pm.test(\"Response body is valid JSON\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"// Test if the response body is not empty\r",
											"pm.test(\"Response body is not empty\", function () {\r",
											"    pm.expect(responseBody).to.not.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", ()=> {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", ()=> {\r",
											" pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');\r",
											"});\r",
											"\r",
											"//Schema validation\r",
											"var schema = {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"userId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userFirstName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userLastName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userMiddleName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userPhoneNumber\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"userLocation\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userTimeZone\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userLinkedinUrl\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userEduUg\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userEduPg\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userComments\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userVisaStatus\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userLoginEmail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"userId\",\r",
											"    \"userFirstName\",\r",
											"    \"userLastName\",\r",
											"    \"userMiddleName\",\r",
											"    \"userPhoneNumber\",\r",
											"    \"userLocation\",\r",
											"    \"userTimeZone\",\r",
											"    \"userLinkedinUrl\",\r",
											"    \"userEduUg\",\r",
											"    \"userEduPg\",\r",
											"    \"userComments\",\r",
											"    \"userVisaStatus\",\r",
											"    \"userLoginEmail\"\r",
											"  ]\r",
											"};\r",
											"pm.test(\"Response body schema is valid\", function() {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var data = pm.iterationData.toObject();\r",
											"var endpoint = data.Endpoint;\r",
											"console.log(\"Endpoint:\", endpoint);\r",
											"\r",
											"if(endpoint === \"/users/roleStatus\") {\r",
											"var userComments = data.userComments;\r",
											"var userEduPg  = data.userEduPg;\r",
											"var userEduUg  = data.userEduUg;\r",
											"var userFirstName  = data.userFirstName;\r",
											"var userId  = data.userId;\r",
											"var userLastName  = data.userLastName;\r",
											"var userLinkedinUrl  = data.userLinkedinUrl;\r",
											"var userLocation  = data.userLocation;\r",
											"var loginstatus  = data.loginstatus;\r",
											"var password  = data.password;\r",
											"var roleIds  = data.roleIds;\r",
											"var status  = data.status;\r",
											"var userLoginEmail  = data.userLoginEmail;\r",
											"var userMiddleName  = data.userMiddleName;\r",
											"var userPhoneNumber  = data.userPhoneNumber;\r",
											"var roleId  = data.roleId;\r",
											"var userRoleStatus  = data.userRoleStatus;\r",
											"var userTimeZone  = data.userTimeZone;\r",
											"var userVisaStatus  = data.userVisaStatus;\r",
											"pm.request.url  = pm.variables.replaceIn(\"{{BaseurlLMS}}\" + endpoint);\r",
											"\r",
											"}\r",
											"const token = pm.environment.get(\"BearerToken\");\r",
											"if (token) {\r",
											"    pm.request.headers.add({\r",
											"        key: \"Authorization\",\r",
											"        value: `Bearer ${token}`\r",
											"    });\r",
											"} else {\r",
											"    console.error(\"Bearer token not found in environment variables.\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userComments\": \"{{userComments01}}\",\r\n  \"userEduPg\": \"{{userEduPg}}\",\r\n  \"userEduUg\": \"{{userEduUg}}\",\r\n  \"userFirstName\": \"{{userFirstName}}\",\r\n  \"userId\": \"{{userId}}\",\r\n  \"userLastName\": \"{{userLastName01}}\",\r\n  \"userLinkedinUrl\": \"{{userLinkedinUrl01}}\",\r\n  \"userLocation\": \"{{userLocation}}\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"{{loginStatus}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"roleIds\": [\r\n      \"{{roleIds}}\"\r\n    ],\r\n    \"status\": \"{{status}}\",\r\n    \"userLoginEmail\": \"{{userLoginEmail01}}\"\r\n  },\r\n  \"userMiddleName\": \"{{userMiddleName}}\",\r\n  \"userPhoneNumber\": {{userPhoneNumber01}},\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"{{roleId01}}\",\r\n      \"userRoleStatus\": \"{{userRoleStatus}}\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{userTimeZone}}\",\r\n  \"userVisaStatus\": \"{{userVisaStatus}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}",
									"host": [
										"{{BaseURL}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Staff User -Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.iterationData.toObject();\r",
											"var endpoint = data.Endpoint;\r",
											"var userComments = data.userComments;\r",
											"var userEduPg  = data.userEduPg;\r",
											"var userEduUg  = data.userEduUg;\r",
											"var userFirstName  = data.userFirstName;\r",
											"var userId  = data.userId;\r",
											"var userLastName  = data.userLastName;\r",
											"var userLinkedinUrl  = data.userLinkedinUrl;\r",
											"var userLocation  = data.userLocation;\r",
											"var loginstatus  = data.loginstatus;\r",
											"var password  = data.password;\r",
											"var roleIds  = data.roleIds;\r",
											"var status  = data.status;\r",
											"var userLoginEmail  = data.userLoginEmail;\r",
											"var userMiddleName  = data.userMiddleName;\r",
											"var userPhoneNumber  = data.userPhoneNumber;\r",
											"var roleId  = data.roleId;\r",
											"var userRoleStatus  = data.userRoleStatus;\r",
											"var userTimeZone  = data.userTimeZone;\r",
											"var userVisaStatus  = data.userVisaStatus;\r",
											"\r",
											"//Test the responce code is 201\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"// Test for response time to be within 600ms\r",
											"pm.test(\"Response time is less than 600ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(600);\r",
											"});\r",
											"\r",
											"//Test for the response body is a JSON\r",
											"pm.test(\"Response body is valid JSON\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"// Test if the response body is not empty\r",
											"pm.test(\"Response body is not empty\", function () {\r",
											"    pm.expect(responseBody).to.not.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", ()=> {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", ()=> {\r",
											" pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');\r",
											"});\r",
											"\r",
											"//Schema validation\r",
											"var schema = {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"userId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userFirstName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userLastName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userMiddleName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userPhoneNumber\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"userLocation\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userTimeZone\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userLinkedinUrl\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userEduUg\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userEduPg\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userComments\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userVisaStatus\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userLoginEmail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"userId\",\r",
											"    \"userFirstName\",\r",
											"    \"userLastName\",\r",
											"    \"userMiddleName\",\r",
											"    \"userPhoneNumber\",\r",
											"    \"userLocation\",\r",
											"    \"userTimeZone\",\r",
											"    \"userLinkedinUrl\",\r",
											"    \"userEduUg\",\r",
											"    \"userEduPg\",\r",
											"    \"userComments\",\r",
											"    \"userVisaStatus\",\r",
											"    \"userLoginEmail\"\r",
											"  ]\r",
											"};\r",
											"pm.test(\"Response body schema is valid\", function() {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var data = pm.iterationData.toObject();\r",
											"var endpoint = data.Endpoint;\r",
											"console.log(\"Endpoint:\", endpoint);\r",
											"\r",
											"if(endpoint === \"/users/roleStatus\") {\r",
											"var userComments = data.userComments;\r",
											"var userEduPg  = data.userEduPg;\r",
											"var userEduUg  = data.userEduUg;\r",
											"var userFirstName  = data.userFirstName;\r",
											"var userId  = data.userId;\r",
											"var userLastName  = data.userLastName;\r",
											"var userLinkedinUrl  = data.userLinkedinUrl;\r",
											"var userLocation  = data.userLocation;\r",
											"var loginstatus  = data.loginstatus;\r",
											"var password  = data.password;\r",
											"var roleIds  = data.roleIds;\r",
											"var status  = data.status;\r",
											"var userLoginEmail  = data.userLoginEmail;\r",
											"var userMiddleName  = data.userMiddleName;\r",
											"var userPhoneNumber  = data.userPhoneNumber;\r",
											"var roleId  = data.roleId;\r",
											"var userRoleStatus  = data.userRoleStatus;\r",
											"var userTimeZone  = data.userTimeZone;\r",
											"var userVisaStatus  = data.userVisaStatus;\r",
											"pm.request.url  = pm.variables.replaceIn(\"{{BaseurlLMS}}\" + endpoint);\r",
											"\r",
											"}\r",
											"const token = pm.environment.get(\"BearerToken\");\r",
											"if (token) {\r",
											"    pm.request.headers.add({\r",
											"        key: \"Authorization\",\r",
											"        value: `Bearer ${token}`\r",
											"    });\r",
											"} else {\r",
											"    console.error(\"Bearer token not found in environment variables.\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userComments\": \"{{userComments02}}\",\r\n  \"userEduPg\": \"{{userEduPg}}\",\r\n  \"userEduUg\": \"{{userEduUg}}\",\r\n  \"userFirstName\": \"{{userFirstName}}\",\r\n  \"userId\": \"{{userId}}\",\r\n  \"userLastName\": \"{{userLastName02}}\",\r\n  \"userLinkedinUrl\": \"{{userLinkedinUrl02}}\",\r\n  \"userLocation\": \"{{userLocation}}\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"{{loginStatus}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"roleIds\": [\r\n      \"{{roleIds}}\"\r\n    ],\r\n    \"status\": \"{{status}}\",\r\n    \"userLoginEmail\": \"{{userLoginEmail02}}\"\r\n  },\r\n  \"userMiddleName\": \"{{userMiddleName}}\",\r\n  \"userPhoneNumber\": {{userPhoneNumber02}},\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"{{roleId02}}\",\r\n      \"userRoleStatus\": \"{{userRoleStatus}}\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{userTimeZone}}\",\r\n  \"userVisaStatus\": \"{{userVisaStatus}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}",
									"host": [
										"{{BaseURL}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Student User -Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.iterationData.toObject();\r",
											"var endpoint = data.Endpoint;\r",
											"var userComments = data.userComments;\r",
											"var userEduPg  = data.userEduPg;\r",
											"var userEduUg  = data.userEduUg;\r",
											"var userFirstName  = data.userFirstName;\r",
											"var userId  = data.userId;\r",
											"var userLastName  = data.userLastName;\r",
											"var userLinkedinUrl  = data.userLinkedinUrl;\r",
											"var userLocation  = data.userLocation;\r",
											"var loginstatus  = data.loginstatus;\r",
											"var password  = data.password;\r",
											"var roleIds  = data.roleIds;\r",
											"var status  = data.status;\r",
											"var userLoginEmail  = data.userLoginEmail;\r",
											"var userMiddleName  = data.userMiddleName;\r",
											"var userPhoneNumber  = data.userPhoneNumber;\r",
											"var roleId  = data.roleId;\r",
											"var userRoleStatus  = data.userRoleStatus;\r",
											"var userTimeZone  = data.userTimeZone;\r",
											"var userVisaStatus  = data.userVisaStatus;\r",
											"\r",
											"//Test the responce code is 201\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"// Test for response time to be within 600ms\r",
											"pm.test(\"Response time is less than 600ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(600);\r",
											"});\r",
											"\r",
											"//Test for the response body is a JSON\r",
											"pm.test(\"Response body is valid JSON\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"// Test if the response body is not empty\r",
											"pm.test(\"Response body is not empty\", function () {\r",
											"    pm.expect(responseBody).to.not.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", ()=> {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", ()=> {\r",
											" pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');\r",
											"});\r",
											"\r",
											"//Schema validation\r",
											"var schema = {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"userId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userFirstName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userLastName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userMiddleName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userPhoneNumber\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"userLocation\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userTimeZone\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userLinkedinUrl\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userEduUg\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userEduPg\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userComments\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userVisaStatus\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userLoginEmail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"userId\",\r",
											"    \"userFirstName\",\r",
											"    \"userLastName\",\r",
											"    \"userMiddleName\",\r",
											"    \"userPhoneNumber\",\r",
											"    \"userLocation\",\r",
											"    \"userTimeZone\",\r",
											"    \"userLinkedinUrl\",\r",
											"    \"userEduUg\",\r",
											"    \"userEduPg\",\r",
											"    \"userComments\",\r",
											"    \"userVisaStatus\",\r",
											"    \"userLoginEmail\"\r",
											"  ]\r",
											"};\r",
											"pm.test(\"Response body schema is valid\", function() {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var data = pm.iterationData.toObject();\r",
											"var endpoint = data.Endpoint;\r",
											"console.log(\"Endpoint:\", endpoint);\r",
											"\r",
											"if(endpoint === \"/users/roleStatus\") {\r",
											"var userComments = data.userComments;\r",
											"var userEduPg  = data.userEduPg;\r",
											"var userEduUg  = data.userEduUg;\r",
											"var userFirstName  = data.userFirstName;\r",
											"var userId  = data.userId;\r",
											"var userLastName  = data.userLastName;\r",
											"var userLinkedinUrl  = data.userLinkedinUrl;\r",
											"var userLocation  = data.userLocation;\r",
											"var loginstatus  = data.loginstatus;\r",
											"var password  = data.password;\r",
											"var roleIds  = data.roleIds;\r",
											"var status  = data.status;\r",
											"var userLoginEmail  = data.userLoginEmail;\r",
											"var userMiddleName  = data.userMiddleName;\r",
											"var userPhoneNumber  = data.userPhoneNumber;\r",
											"var roleId  = data.roleId;\r",
											"var userRoleStatus  = data.userRoleStatus;\r",
											"var userTimeZone  = data.userTimeZone;\r",
											"var userVisaStatus  = data.userVisaStatus;\r",
											"pm.request.url  = pm.variables.replaceIn(\"{{BaseurlLMS}}\" + endpoint);\r",
											"\r",
											"}\r",
											"const token = pm.environment.get(\"BearerToken\");\r",
											"if (token) {\r",
											"    pm.request.headers.add({\r",
											"        key: \"Authorization\",\r",
											"        value: `Bearer ${token}`\r",
											"    });\r",
											"} else {\r",
											"    console.error(\"Bearer token not found in environment variables.\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userComments\": \"{{userComments03}}\",\r\n  \"userEduPg\": \"{{userEduPg}}\",\r\n  \"userEduUg\": \"{{userEduUg}}\",\r\n  \"userFirstName\": \"{{userFirstName}}\",\r\n  \"userId\": \"{{userId}}\",\r\n  \"userLastName\": \"{{userLastName03}}\",\r\n  \"userLinkedinUrl\": \"{{userLinkedinUrl03}}\",\r\n  \"userLocation\": \"{{userLocation}}\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"{{loginStatus}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"roleIds\": [\r\n      \"{{roleIds}}\"\r\n    ],\r\n    \"status\": \"{{status}}\",\r\n    \"userLoginEmail\": \"{{userLoginEmail03}}\"\r\n  },\r\n  \"userMiddleName\": \"{{userMiddleName}}\",\r\n  \"userPhoneNumber\": {{userPhoneNumber03}},\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"{{roleId03}}\",\r\n      \"userRoleStatus\": \"{{userRoleStatus}}\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{userTimeZone}}\",\r\n  \"userVisaStatus\": \"{{userVisaStatus}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}",
									"host": [
										"{{BaseURL}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All Users - Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var endpoint = data.Endpoint;\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is OK\", ()=> {\r",
											"    pm.response.to.have.status(\"OK\")\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 600ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(600);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body is valid JSON\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"// Test if the response body is not empty\r",
											"pm.test(\"Response body is not empty\", function () {\r",
											"    pm.expect(responseBody).to.not.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", ()=> {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", ()=> {\r",
											" pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');\r",
											"});\r",
											"\r",
											"var responseBody = pm.response.json();\r",
											"pm.test(\"Response body is an array\", function () {\r",
											"    pm.expect(responseBody).to.be.an('array');\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const token = pm.environment.get(\"BearerToken\");\r",
											"if (token) {\r",
											"    pm.request.headers.add({\r",
											"        key: \"Authorization\",\r",
											"        value: `Bearer ${token}`\r",
											"    });\r",
											"} else {\r",
											"    console.error(\"Bearer token not found in environment variables.\");\r",
											"}\r",
											"var data = pm.iterationData.toObject();\r",
											"var endpoint = data.Endpoint;\r",
											"console.log(\"Endpoint:\", endpoint);\r",
											"if (endpoint === '/users') {\r",
											"pm.request.url  = pm.variables.replaceIn(\"{{BaseurlLMS}}\"+endpoint);\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "pm.test(\"Status code is 200\", function () {\r\n    pm.response.to.have.status(200);\r\n});\r\n\r\npm.test(\"Status code is OK\", ()=> {\r\n    pm.response.to.have.status(\"OK\")\r\n});\r\n\r\npm.test(\"Response time is less than 600ms\", function () {\r\n    pm.expect(pm.response.responseTime).to.be.below(600);\r\n});\r\n\r\npm.test(\"Response body is valid JSON\", function () {\r\n    pm.response.to.be.json;\r\n});\r\n\r\n// Test if the response body is not empty\r\npm.test(\"Response body is not empty\", function () {\r\n    pm.expect(responseBody).to.not.be.empty;\r\n});\r\n\r\npm.test(\"Content-Type header is present\", ()=> {\r\n    pm.response.to.have.header(\"Content-Type\");\r\n});\r\n\r\npm.test(\"Content-Type header is application/json\", ()=> {\r\n pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');\r\n});\r\n\r\nvar responseBody = pm.response.json();\r\npm.test(\"Response body is an array\", function () {\r\n    pm.expect(responseBody).to.be.an('array');\r\n});",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}",
									"host": [
										"{{BaseURL}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All Roles - success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var endpoint = data.Endpoint;\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is OK\", ()=> {\r",
											"    pm.response.to.have.status(\"OK\")\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 600ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(600);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body is valid JSON\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"// Test if the response body is not empty\r",
											"pm.test(\"Response body is not empty\", function () {\r",
											"    pm.expect(responseBody).to.not.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", ()=> {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", ()=> {\r",
											" pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');\r",
											"});\r",
											"\r",
											"var responseBody = pm.response.json();\r",
											"pm.test(\"Response body is an array\", function () {\r",
											"    pm.expect(responseBody).to.be.an('array');\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const token = pm.environment.get(\"BearerToken\");\r",
											"if (token) {\r",
											"    pm.request.headers.add({\r",
											"        key: \"Authorization\",\r",
											"        value: `Bearer ${token}`\r",
											"    });\r",
											"} else {\r",
											"    console.error(\"Bearer token not found in environment variables.\");\r",
											"}\r",
											"var data = pm.iterationData.toObject();\r",
											"var endpoint = data.Endpoint;\r",
											"console.log(\"Endpoint:\", endpoint);\r",
											"if (endpoint === '/users/roles') {\r",
											"pm.request.url  = pm.variables.replaceIn(\"{{BaseurlLMS}}\"+endpoint);\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "pm.test(\"Status code is 200\", function () {\r\n    pm.response.to.have.status(200);\r\n});\r\n\r\npm.test(\"Status code is OK\", ()=> {\r\n    pm.response.to.have.status(\"OK\")\r\n});\r\n\r\npm.test(\"Response time is less than 600ms\", function () {\r\n    pm.expect(pm.response.responseTime).to.be.below(600);\r\n});\r\n\r\npm.test(\"Response body is valid JSON\", function () {\r\n    pm.response.to.be.json;\r\n});\r\n\r\n// Test if the response body is not empty\r\npm.test(\"Response body is not empty\", function () {\r\n    pm.expect(responseBody).to.not.be.empty;\r\n});\r\n\r\npm.test(\"Content-Type header is present\", ()=> {\r\n    pm.response.to.have.header(\"Content-Type\");\r\n});\r\n\r\npm.test(\"Content-Type header is application/json\", ()=> {\r\n pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');\r\n});\r\n\r\nvar responseBody = pm.response.json();\r\npm.test(\"Response body is an array\", function () {\r\n    pm.expect(responseBody).to.be.an('array');\r\n});",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}",
									"host": [
										"{{BaseURL}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get user info by user id - success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.iterationData.toObject();\r",
											"var endpoint = data.Endpoint;\r",
											"var userComments = data.userComments;\r",
											"var userEduPg  = data.userEduPg;\r",
											"var userEduUg  = data.userEduUg;\r",
											"var userFirstName  = data.userFirstName;\r",
											"var userId  = data.userId;\r",
											"var userLastName  = data.userLastName;\r",
											"var userLinkedinUrl  = data.userLinkedinUrl;\r",
											"var userLocation  = data.userLocation;\r",
											"var userLoginEmail  = data.userLoginEmail;\r",
											"var userMiddleName  = data.userMiddleName;\r",
											"var userPhoneNumber  = data.userPhoneNumber;\r",
											"var roleId  = data.roleId;\r",
											"var userRoleStatus  = data.userRoleStatus;\r",
											"var userTimeZone  = data.userTimeZone;\r",
											"var userVisaStatus  = data.userVisaStatus;\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is OK\", ()=> {\r",
											"    pm.response.to.have.status(\"OK\")\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 600ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(600);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body is valid JSON\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"// Test if the response body is not empty\r",
											"pm.test(\"Response body is not empty\", function () {\r",
											"    pm.expect(responseBody).to.not.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", ()=> {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", ()=> {\r",
											" pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');\r",
											"});\r",
											"const datatype = pm.response.json();\r",
											"pm.test(\"Test data type of the response\", () => {\r",
											"pm.expect(datatype).to.be.a(\"object\");\r",
											"pm.expect(datatype.userComments).to.be.a(\"string\");\r",
											"pm.expect(datatype.userEduPg).to.be.a(\"string\");\r",
											"pm.expect(datatype.userEduUg).to.be.a(\"string\");\r",
											"pm.expect(datatype.userFirstName).to.be.a(\"string\");\r",
											"pm.expect(datatype.userId).to.be.a(\"string\");\r",
											"pm.expect(datatype.userLastName).to.be.a(\"string\");\r",
											"pm.expect(datatype.userLinkedinUrl).to.be.a(\"string\");\r",
											"pm.expect(datatype.userLocation).to.be.a(\"string\");\r",
											"pm.expect(datatype.loginstatus).to.be.a(\"string\");\r",
											"pm.expect(datatype.password).to.be.a(\"string\");\r",
											"pm.expect(datatype.roleIds).to.be.a(\"string\");\r",
											"pm.expect(datatype.status).to.be.a(\"string\");\r",
											"pm.expect(datatype.userLoginEmail).to.be.a(\"string\");\r",
											"pm.expect(datatype.userMiddleName).to.be.a(\"string\");\r",
											"pm.expect(datatype.userPhoneNumber).to.be.a(\"number\");\r",
											"pm.expect(datatype.roleId).to.be.a(\"string\");\r",
											"pm.expect(datatype.userRoleStatus).to.be.a(\"string\");\r",
											"pm.expect(datatype.userTimeZone).to.be.a(\"string\");\r",
											"pm.expect(datatype.userVisaStatus).to.be.a(\"string\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var data = pm.iterationData.toObject();\r",
											"var endpoint = data.Endpoint;\r",
											"console.log(\"Endpoint:\", endpoint);\r",
											"\r",
											"if (endpoint === '/users/{userId}') {\r",
											"var userComments = data.userComments;\r",
											"var userEduPg  = data.userEduPg;\r",
											"var userEduUg  = data.userEduUg;\r",
											"var userFirstName  = data.userFirstName;\r",
											"var userId  = data.userId;\r",
											"var userLastName  = data.userLastName;\r",
											"var userLinkedinUrl  = data.userLinkedinUrl;\r",
											"var userLocation  = data.userLocation;\r",
											"var userLoginEmail  = data.userLoginEmail;\r",
											"var userMiddleName  = data.userMiddleName;\r",
											"var userPhoneNumber  = data.userPhoneNumber;\r",
											"var roleId  = data.roleId;\r",
											"var userRoleStatus  = data.userRoleStatus;\r",
											"var userTimeZone  = data.userTimeZone;\r",
											"var userVisaStatus  = data.userVisaStatus;\r",
											"pm.request.url  = pm.variables.replaceIn(\"{{BaseurlLMS}}/users/\" + userId);\r",
											"\r",
											"}\r",
											"const token = pm.environment.get(\"BearerToken\");\r",
											"if (token) {\r",
											"    pm.request.headers.add({\r",
											"        key: \"Authorization\",\r",
											"        value: `Bearer ${token}`\r",
											"    });\r",
											"} else {\r",
											"    console.error(\"Bearer token not found in environment variables.\");\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}",
									"host": [
										"{{BaseURL}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Users with Roles - Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var endpoint = data.Endpoint;\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is OK\", ()=> {\r",
											"    pm.response.to.have.status(\"OK\")\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 600ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(600);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body is valid JSON\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"// Test if the response body is not empty\r",
											"pm.test(\"Response body is not empty\", function () {\r",
											"    pm.expect(responseBody).to.not.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is present\", ()=> {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", ()=> {\r",
											" pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');\r",
											"});\r",
											"\r",
											"var responseBody = pm.response.json();\r",
											"pm.test(\"Response body is an array\", function () {\r",
											"    pm.expect(responseBody).to.be.an('array');\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const token = pm.environment.get(\"BearerToken\");\r",
											"if (token) {\r",
											"    pm.request.headers.add({\r",
											"        key: \"Authorization\",\r",
											"        value: `Bearer ${token}`\r",
											"    });\r",
											"} else {\r",
											"    console.error(\"Bearer token not found in environment variables.\");\r",
											"}\r",
											"var data = pm.iterationData.toObject();\r",
											"var endpoint = data.Endpoint;\r",
											"console.log(\"Endpoint:\", endpoint);\r",
											"if (endpoint === '/roles') {\r",
											"pm.request.url  = pm.variables.replaceIn(\"{{BaseurlLMS}}\" + endpoint);\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}",
									"host": [
										"{{BaseURL}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Negative",
					"item": [
						{
							"name": "Create Admin User - Repeat phone no. Error",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userComments\": \"{{userComments01}}\",\r\n  \"userEduPg\": \"{{userEduPg}}\",\r\n  \"userEduUg\": \"{{userEduUg}}\",\r\n  \"userFirstName\": \"{{userFirstName}}\",\r\n  \"userId\": \"{{userId}}\",\r\n  \"userLastName\": \"{{userLastName01}}\",\r\n  \"userLinkedinUrl\": \"{{userLinkedinUrl01}}\",\r\n  \"userLocation\": \"{{userLocation}}\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"{{loginStatus}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"roleIds\": [\r\n      \"{{roleIds}}\"\r\n    ],\r\n    \"status\": \"{{status}}\",\r\n    \"userLoginEmail\": \"{{userLoginEmail01}}\"\r\n  },\r\n  \"userMiddleName\": \"{{userMiddleName}}\",\r\n  \"userPhoneNumber\": {{userPhoneNumber01}},\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"{{roleId01}}\",\r\n      \"userRoleStatus\": \"{{userRoleStatus}}\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{userTimeZone}}\",\r\n  \"userVisaStatus\": \"{{userVisaStatus}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/users/roleStatus",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"users",
										"roleStatus"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Admin User - Repeat email Error",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userComments\": \"{{userComments01}}\",\r\n  \"userEduPg\": \"{{userEduPg}}\",\r\n  \"userEduUg\": \"{{userEduUg}}\",\r\n  \"userFirstName\": \"{{userFirstName}}\",\r\n  \"userId\": \"{{userId}}\",\r\n  \"userLastName\": \"{{userLastName01}}\",\r\n  \"userLinkedinUrl\": \"{{userLinkedinUrl01}}\",\r\n  \"userLocation\": \"{{userLocation}}\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"{{loginStatus}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"roleIds\": [\r\n      \"{{roleIds}}\"\r\n    ],\r\n    \"status\": \"{{status}}\",\r\n    \"userLoginEmail\": \"{{userLoginEmail01}}\"\r\n  },\r\n  \"userMiddleName\": \"{{userMiddleName}}\",\r\n  \"userPhoneNumber\": {{userPhoneNumber01}},\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"{{roleId01}}\",\r\n      \"userRoleStatus\": \"{{userRoleStatus}}\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{userTimeZone}}\",\r\n  \"userVisaStatus\": \"{{userVisaStatus}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/users/roleStatus",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"users",
										"roleStatus"
									]
								}
							},
							"response": []
						},
						{
							"name": "User Admin Create - userEduPg invalid value error",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userComments\": \"{{userComments01}}\",\r\n  \"userEduPg\": \"{{userEduPg}}\",\r\n  \"userEduUg\": \"{{userEduUgNull}}\",\r\n  \"userFirstName\": \"{{userFirstName}}\",\r\n  \"userId\": \"{{userId}}\",\r\n  \"userLastName\": \"{{userLastName01}}\",\r\n  \"userLinkedinUrl\": \"{{userLinkedinUrl01}}\",\r\n  \"userLocation\": \"{{userLocation}}\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"{{loginStatus}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"roleIds\": [\r\n      \"{{roleIds}}\"\r\n    ],\r\n    \"status\": \"{{status}}\",\r\n    \"userLoginEmail\": \"{{userLoginEmail01}}\"\r\n  },\r\n  \"userMiddleName\": \"{{userMiddleName}}\",\r\n  \"userPhoneNumber\": {{userPhoneNumber01}},\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"{{roleId01}}\",\r\n      \"userRoleStatus\": \"{{userRoleStatus}}\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{userTimeZone}}\",\r\n  \"userVisaStatus\": \"{{userVisaStatus}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}{{EPCreateInvalidValue}}",
									"host": [
										"{{BaseURL}}{{EPCreateInvalidValue}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "User Create - Invalid EndPoint ",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userComments\": \"{{userComments01}}\",\r\n  \"userEduPg\": \"{{userEduPg}}\",\r\n  \"userEduUg\": \"{{userEduUg}}\",\r\n  \"userFirstName\": \"{{userFirstName}}\",\r\n  \"userId\": \"{{userId}}\",\r\n  \"userLastName\": \"{{userLastName01}}\",\r\n  \"userLinkedinUrl\": \"{{userLinkedinUrl01}}\",\r\n  \"userLocation\": \"{{userLocation}}\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"{{loginStatus}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"roleIds\": [\r\n      \"{{roleIds}}\"\r\n    ],\r\n    \"status\": \"{{status}}\",\r\n    \"userLoginEmail\": \"{{userLoginEmail01}}\"\r\n  },\r\n  \"userMiddleName\": \"{{userMiddleName}}\",\r\n  \"userPhoneNumber\": {{userPhoneNumber01}},\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"{{roleId01}}\",\r\n      \"userRoleStatus\": \"{{userRoleStatus}}\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{userTimeZone}}\",\r\n  \"userVisaStatus\": \"{{userVisaStatus}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}{{EPCreateInvalidEndpoint}}",
									"host": [
										"{{BaseURL}}{{EPCreateInvalidEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create User - Role ID Mandatory field required error",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userComments\": \"{{userComments01}}\",\r\n  \"userEduPg\": \"{{userEduPg}}\",\r\n  \"userEduUg\": \"{{userEduUg}}\",\r\n  \"userFirstName\": \"{{userFirstName}}\",\r\n  \"userId\": \"{{userId}}\",\r\n  \"userLastName\": \"{{userLastName01}}\",\r\n  \"userLinkedinUrl\": \"{{userLinkedinUrl01}}\",\r\n  \"userLocation\": \"{{userLocation}}\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"{{loginStatus}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"roleIds\": [\r\n      \"{{roleIds}}\"\r\n    ],\r\n    \"status\": \"{{status}}\",\r\n    \"userLoginEmail\": \"{{userLoginEmail01}}\"\r\n  },\r\n  \"userMiddleName\": \"{{userMiddleName}}\",\r\n  \"userPhoneNumber\": {{userPhoneNumber01}},\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"userRoleStatus\": \"{{userRoleStatus}}\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{userTimeZone}}\",\r\n  \"userVisaStatus\": \"{{userVisaStatus}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}{{EPMandatoryRoleIdMissing}}",
									"host": [
										"{{BaseURL}}{{EPMandatoryRoleIdMissing}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All Users with Invalid token",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "erudhgd",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/users",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get user information with Invalid User ID",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/users/I150",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"users",
										"I150"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Users with Invalid Endpoint /user",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/user",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Roles with Invalid Endpoint /user/roles",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/user/roles",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"user",
										"roles"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get user information by UserId with Invalid Endpoint /user/U271",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/user/U271",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"user",
										"U271"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All Users with Roles with Invalid Endpoint /rols",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/rols",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"rols"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "USERModule3",
			"item": [
				{
					"name": "Positive TC",
					"item": [
						{
							"name": "Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"var endpoint = data.Endpoint;\r",
											"if (pm.request.method === \"POST\" && endpoint === \"/login\") {\r",
											"\r",
											"pm.test(\"set the authentication\", function () {\r",
											"    \r",
											"    const jsonData = pm.response.json();\r",
											"    var bodytoken=jsonData.token;\r",
											"    pm.environment.set(\"BearerToken\",bodytoken);\r",
											"    \r",
											"});\r",
											"        console.log(\"Test already executed for /login endpoint.\");\r",
											"    }\r",
											"else {\r",
											"    console.log(\"Current request is not for /login endpoint.\");\r",
											"}\r",
											"\r",
											"if(pm.response.code===201){\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"            pm.response.to.have.status(200);\r",
											"        });}\r",
											"        \r",
											"else if(pm.response.code=== 400){\r",
											"    pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var data = pm.iterationData.toObject();\r",
											"var endpoint = data.Endpoint;\r",
											"console.log(\"Endpoint:\", endpoint);\r",
											"\r",
											"\r",
											"if (endpoint === '/Login') {\r",
											"var password = data.password;\r",
											"var UserLoginEmailId = data.userLoginEmailId;\r",
											"pm.request.url  = pm.variables.replaceIn(\"{{baseURL}}/Login\");\r",
											"\r",
											"}\r",
											"const token = pm.environment.get(\"BearerToken\");\r",
											"if (token) {\r",
											"    pm.request.headers.add({\r",
											"        key: \"Authorization\",\r",
											"        value: `Bearer ${token}`\r",
											"    });\r",
											"} else {\r",
											"    console.error(\"Bearer token not found in environment variables.\");\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"Numpyninja@1\",\r\n        \"userLoginEmailId\": \"sdetorganizers@gmail.com\"\r\n}\r\n\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/login",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "UserRole01",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var data = pm.iterationData.toObject();\r",
											"var endpoint = data.Endpoint;\r",
											"console.log(\"Endpoint:\", endpoint);\r",
											"\r",
											"\r",
											"if (endpoint === 'users/roleStatus/{userID}') {\r",
											"var roleId = data.roleId;\r",
											"var userRoleStatus = data.userRoleStatus;\r",
											"pm.request.url  = pm.variables.replaceIn(\"{{baseurl}}/users/roleStatus\" + userId);\r",
											"\r",
											"}\r",
											"const token = pm.environment.get(\"BearerToken\");\r",
											"if (token) {\r",
											"    pm.request.headers.add({\r",
											"        key: \"Authorization\",\r",
											"        value: `Bearer ${token}`\r",
											"    });\r",
											"} else {\r",
											"    console.error(\"Bearer token not found in environment variables.\");\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.iterationData.toObject();\r",
											"var data = pm.iterationData.toObject();\r",
											"var endpoint = data.Endpoint;\r",
											"if (pm.request.method === \"PUT\" && endpoint === \"users/roleStatus/{userId}\") {\r",
											"if(pm.response.code===200){\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"        pm.response.to.have.status(\"OK\");\r",
											"        });\r",
											"\r",
											"    \r",
											"pm.test(\"Response is valid JSON\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 400ms\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(400)\r",
											"\r",
											"});\r",
											"try {\r",
											"\r",
											"pm.test(\"Content-Type header is present\", () => {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", () => {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');\r",
											"});\r",
											"\r",
											"//Test the type field\r",
											"pm.test(\"Type is present\", function () {\r",
											"    pm.expect(responseBody).to.have.property('type');\r",
											"    pm.expect(responseBody.type).to.equal('UserStatus updated for User:UserID');\r",
											"}); \r",
											"}catch (error) {\r",
											"    console.error(\"Error parsing response JSON:\", error.message);\r",
											"\r",
											"}\r",
											" if(pm.response.code=== 400){\r",
											"pm.test(\"Response code is 400\", function () {\r",
											" if (responseJson && responseJson.message)\r",
											"  {\r",
											"console.error(\"400 Bad Request missing field : \", responseJson.message);\r",
											" } else {\r",
											"console.error(\"Unknown request error:\", pm.response.text());\r",
											" }\r",
											"});\r",
											"}\r",
											"if(pm.response.code=== 404){\r",
											"    pm.test(\"Response code is 404\", function () {\r",
											" if (responseJson && responseJson.message)\r",
											"  {\r",
											"console.error(\" 404  Request invalid: \", responseJson.message);\r",
											" } else {\r",
											"console.error(\"Unknown bad request:\", pm.response.text());\r",
											" }\r",
											"});\r",
											"}}}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n\r\n\r\n\t{\r\n  \"roleId\": \"{{roleId}}\",\r\n  \"userRoleStatus\": \"{{userRoleStatus}}\"\r\n}\r\n\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}{{userRoleEndpoint}}",
									"host": [
										"{{baseURL}}{{userRoleEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "UserRole02",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var data = pm.iterationData.toObject();\r",
											"var endpoint = data.Endpoint;\r",
											"console.log(\"Endpoint:\", endpoint);\r",
											"\r",
											"\r",
											"if (endpoint === 'users/roleStatus/{userID}') {\r",
											"var roleId = data.roleId;\r",
											"var userRoleStatus = data.userRoleStatus;\r",
											"pm.request.url  = pm.variables.replaceIn(\"{{baseURL}}/users/roleStatus\" + userId);\r",
											"\r",
											"}\r",
											"const token = pm.environment.get(\"BearerToken\");\r",
											"if (token) {\r",
											"    pm.request.headers.add({\r",
											"        key: \"Authorization\",\r",
											"        value: `Bearer ${token}`\r",
											"    });\r",
											"} else {\r",
											"    console.error(\"Bearer token not found in environment variables.\");\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.iterationData.toObject();\r",
											"var data = pm.iterationData.toObject();\r",
											"var endpoint = data.Endpoint;\r",
											"if (pm.request.method === \"PUT\" && endpoint === \"/users/roleStatus/{userId}\") {\r",
											"if(pm.response.code===200){\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"        pm.response.to.have.status(\"OK\");\r",
											"        });\r",
											"\r",
											"pm.test(\"Content-Type header is present\", ()=> {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", ()=> {\r",
											" pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"user_roleId is not empty\", function () { \r",
											"    pm.expect(responseBody.user_roleId).to.not.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(\"user_role_status is not empty\", function () {\r",
											"    pm.expect(responseBody.user_role_status).to.not.be.empty;\r",
											"});\r",
											"try {\r",
											"pm.test(\"Response is valid JSON\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 600ms\",()=>{\r",
											"    pm.expect(pm.response.responseTime).to.be.below(600)\r",
											"});\r",
											"//Test the type field\r",
											"pm.test(\"Type is present\", function () {\r",
											"    pm.expect(responseBody).to.have.property('type');\r",
											"    pm.expect(responseBody.type).to.equal('UserStatus updated for User:UserID');\r",
											"}); \r",
											"}catch (error) {\r",
											"    console.error(\"Error parsing response JSON:\", error.message);\r",
											"\r",
											"}\r",
											" if(pm.response.code=== 400){\r",
											"pm.test(\"Response code is 400\", function () {\r",
											" if (responseJson && responseJson.message)\r",
											"  {\r",
											"console.error(\"400 Bad Request missing field : \", responseJson.message);\r",
											" } else {\r",
											"console.error(\"Unknown request error:\", pm.response.text());\r",
											" }\r",
											"});\r",
											"}\r",
											"if(pm.response.code=== 404){\r",
											"    pm.test(\"Response code is 404\", function () {\r",
											" if (responseJson && responseJson.message)\r",
											"  {\r",
											"console.error(\" 404  Request invalid: \", responseJson.message);\r",
											" } else {\r",
											"console.error(\"Unknown bad request:\", pm.response.text());\r",
											" }\r",
											"});\r",
											"}}}\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"roleId\": \"{{roleId}}\",\r\n  \"userRoleStatus\": \"{{userRoleStatus}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}{{userRoleEndpoint}}",
									"host": [
										"{{baseURL}}{{userRoleEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "UserRole03",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var data = pm.iterationData.toObject();\r",
											"var endpoint = data.Endpoint;\r",
											"console.log(\"Endpoint:\", endpoint);\r",
											"\r",
											"\r",
											"if (endpoint === 'users/roleStatus/{userID}') {\r",
											"var roleId = data.roleId;\r",
											"var userRoleStatus = data.userRoleStatus;\r",
											"pm.request.url  = pm.variables.replaceIn(\"{{baseURL}}/users/roleStatus\" + userId);\r",
											"\r",
											"}\r",
											"const token = pm.environment.get(\"BearerToken\");\r",
											"if (token) {\r",
											"    pm.request.headers.add({\r",
											"        key: \"Authorization\",\r",
											"        value: `Bearer ${token}`\r",
											"    });\r",
											"} else {\r",
											"    console.error(\"Bearer token not found in environment variables.\");\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.iterationData.toObject();\r",
											"\r",
											"var data = pm.iterationData.toObject();\r",
											"var endpoint = data.Endpoint;\r",
											"if (pm.request.method === \"PUT\" && endpoint === \"/users/roleStatus/{userId}\") {\r",
											"if(pm.response.code===200){\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"        pm.response.to.have.status(\"OK\");\r",
											"        });\r",
											"\r",
											"\r",
											"pm.test(\"Response is valid JSON\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 600ms\",()=>{\r",
											"    pm.expect(pm.response.responseTime).to.be.below(600)\r",
											"});\r",
											"try {\r",
											"\r",
											"pm.test(\"Content-Type header is present\", () => {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", () => {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');\r",
											"});\r",
											"//Test the type field\r",
											"pm.test(\"Type is present\", function () {\r",
											"    pm.expect(responseBody).to.have.property('type');\r",
											"    pm.expect(responseBody.type).to.equal('UserStatus updated for User:UserID');\r",
											"}); \r",
											"}catch (error) {\r",
											"    console.error(\"Error parsing response JSON:\", error.message);\r",
											"\r",
											"}\r",
											" if(pm.response.code=== 400){\r",
											"pm.test(\"Response code is 400\", function () {\r",
											" if (responseJson && responseJson.message)\r",
											"  {\r",
											"console.error(\"400 Bad Request missing field : \", responseJson.message);\r",
											" } else {\r",
											"console.error(\"Unknown request error:\", pm.response.text());\r",
											" }\r",
											"});\r",
											"}\r",
											"if(pm.response.code=== 404){\r",
											"    pm.test(\"Response code is 404\", function () {\r",
											" if (responseJson && responseJson.message)\r",
											"  {\r",
											"console.error(\" 404  Request invalid: \", responseJson.message);\r",
											" } else {\r",
											"console.error(\"Unknown bad request:\", pm.response.text());\r",
											" }\r",
											"});\r",
											"}}}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"roleId\": \"{{roleId}}\",\r\n  \"userRoleStatus\": \"{{userRoleStatus}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}{{userRoleEndpoint}}",
									"host": [
										"{{baseURL}}{{userRoleEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "UserRoleID01",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var data = pm.iterationData.toObject();\r",
											"var endpoint = data.Endpoint;\r",
											"console.log(\"Endpoint:\", endpoint);\r",
											"\r",
											"\r",
											"if (endpoint === 'users/roleStatus/{userID}') {\r",
											"var userRoleList = data.userRoleList;\r",
											"pm.request.url  = pm.variables.replaceIn(\"{{baseURL}}/users/roleStatus\" + userId);\r",
											"\r",
											"}\r",
											"const token = pm.environment.get(\"BearerToken\");\r",
											"if (token) {\r",
											"    pm.request.headers.add({\r",
											"        key: \"Authorization\",\r",
											"        value: `Bearer ${token}`\r",
											"    });\r",
											"} else {\r",
											"    console.error(\"Bearer token not found in environment variables.\");\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.iterationData.toObject();\r",
											"var endpoint = data.Endpoint;\r",
											"if (pm.request.method === \"PUT\" && endpoint === \"/users/roleStatus/{userId}\") {\r",
											"if(pm.response.code===200){\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"        pm.response.to.have.status(\"OK\");\r",
											"        });\r",
											"pm.test(\"Response is valid JSON\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 600ms\",()=>{\r",
											"    pm.expect(pm.response.responseTime).to.be.below(600)\r",
											"\r",
											"});\r",
											"try {\r",
											"\r",
											"pm.test(\"Content-Type header is present\", () => {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", () => {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');\r",
											"});\r",
											"//Test the type field\r",
											"pm.test(\"Type is present\", function () {\r",
											"    pm.expect(responseBody).to.have.property('type');\r",
											"    pm.expect(responseBody.type).to.equal('userRole updated for User:UserID');\r",
											"}); \r",
											"}catch (error) {\r",
											"    console.error(\"Error parsing response JSON:\", error.message);\r",
											"\r",
											"}\r",
											" if(pm.response.code=== 400){\r",
											"pm.test(\"Response code is 400\", function () {\r",
											" if (responseJson && responseJson.message)\r",
											"  {\r",
											"console.error(\"400 Bad Request missing field : \", responseJson.message);\r",
											" } else {\r",
											"console.error(\"Unknown request error:\", pm.response.text());\r",
											" }\r",
											"});\r",
											"}\r",
											"if(pm.response.code=== 404){\r",
											"    pm.test(\"Response code is 404\", function () {\r",
											" if (responseJson && responseJson.message)\r",
											"  {\r",
											"console.error(\" 404  Request invalid: \", responseJson.message);\r",
											" } else {\r",
											"console.error(\"Unknown bad request:\", pm.response.text());\r",
											" }\r",
											"});\r",
											"}}}\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n\r\n\r\n\t{\r\n  \"userRoleList\": [\r\n    \"{{userRoleList}}\"\r\n    ]\r\n}\r\n\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}{{userstatusEndpoint}}",
									"host": [
										"{{baseURL}}{{userstatusEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "UserRoleID02",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var data = pm.iterationData.toObject();\r",
											"var endpoint = data.Endpoint;\r",
											"console.log(\"Endpoint:\", endpoint);\r",
											"\r",
											"\r",
											"if (endpoint === 'users/roleStatus/{userID}') {\r",
											"var userRoleList = data.userRoleList;\r",
											"pm.request.url  = pm.variables.replaceIn(\"{{baseURL}}/users/roleStatus\" + userId);\r",
											"\r",
											"}\r",
											"const token = pm.environment.get(\"BearerToken\");\r",
											"if (token) {\r",
											"    pm.request.headers.add({\r",
											"        key: \"Authorization\",\r",
											"        value: `Bearer ${token}`\r",
											"    });\r",
											"} else {\r",
											"    console.error(\"Bearer token not found in environment variables.\");\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.iterationData.toObject();\r",
											"var endpoint = data.Endpoint;\r",
											"if (pm.request.method === \"PUT\" && endpoint === \"/users/roleStatus/{userId}\") {\r",
											"if(pm.response.code===200){\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"        pm.response.to.have.status(\"OK\");\r",
											"        });\r",
											"    \r",
											"pm.test(\"Response is valid JSON\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"   \r",
											"pm.test(\"Response time is less than 600ms\",()=>{\r",
											"    pm.expect(pm.response.responseTime).to.be.below(600)\r",
											"});\r",
											"try {\r",
											"\r",
											"pm.test(\"Content-Type header is present\", () => {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", () => {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');\r",
											"});\r",
											"//Test the type field\r",
											"pm.test(\"Type is present\", function () {\r",
											"    pm.expect(responseBody).to.have.property('type');\r",
											"    pm.expect(responseBody.type).to.equal('userRole updated for User:UserID');\r",
											"}); \r",
											"}catch (error) {\r",
											"    console.error(\"Error parsing response JSON:\", error.message);\r",
											"\r",
											"}\r",
											" if(pm.response.code=== 400){\r",
											"pm.test(\"Response code is 400\", function () {\r",
											" if (responseJson && responseJson.message)\r",
											"  {\r",
											"console.error(\"400 Bad Request missing field : \", responseJson.message);\r",
											" } else {\r",
											"console.error(\"Unknown request error:\", pm.response.text());\r",
											" }\r",
											"});\r",
											"}\r",
											"if(pm.response.code=== 404){\r",
											"    pm.test(\"Response code is 404\", function () {\r",
											" if (responseJson && responseJson.message)\r",
											"  {\r",
											"console.error(\" 404  Request invalid: \", responseJson.message);\r",
											" } else {\r",
											"console.error(\"Unknown bad request:\", pm.response.text());\r",
											" }\r",
											"});\r",
											"}}}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userRoleList\": [\r\n    \"{{userRoleList}}\"\r\n    ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}{{userstatusEndpoint}}",
									"host": [
										"{{baseURL}}{{userstatusEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "UserRoleID03",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"var data = pm.iterationData.toObject();\r",
											"var endpoint = data.Endpoint;\r",
											"console.log(\"Endpoint:\", endpoint);\r",
											"\r",
											"\r",
											"if (endpoint === 'users/roleStatus/{userID}') {\r",
											"var userRoleList = data.userRoleList;\r",
											"pm.request.url  = pm.variables.replaceIn(\"{{baseURL}}/users/roleStatus\" + userId);\r",
											"\r",
											"}\r",
											"const token = pm.environment.get(\"BearerToken\");\r",
											"if (token) {\r",
											"    pm.request.headers.add({\r",
											"        key: \"Authorization\",\r",
											"        value: `Bearer ${token}`\r",
											"    });\r",
											"} else {\r",
											"    console.error(\"Bearer token not found in environment variables.\");\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.iterationData.toObject();\r",
											"var endpoint = data.Endpoint;\r",
											"if (pm.request.method === \"PUT\" && endpoint === \"/users/roleStatus/{userId}\") {\r",
											"if(pm.response.code===200){\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"        pm.response.to.have.status(\"OK\");\r",
											"        });\r",
											"\r",
											"pm.test(\"Response is valid JSON\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 600ms\",()=>{\r",
											"    pm.expect(pm.response.responseTime).to.be.below(600)\r",
											"\r",
											"});\r",
											"try {\r",
											"\r",
											"pm.test(\"Content-Type header is present\", () => {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", () => {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');\r",
											"});\r",
											"//Test the type field\r",
											"pm.test(\"Type is present\", function () {\r",
											"    pm.expect(responseBody).to.have.property('type');\r",
											"    pm.expect(responseBody.type).to.equal('userRole updated for User:UserID');\r",
											"}); \r",
											"}catch (error) {\r",
											"    console.error(\"Error parsing response JSON:\", error.message);\r",
											"\r",
											"}\r",
											" if(pm.response.code=== 400){\r",
											"pm.test(\"Response code is 400\", function () {\r",
											" if (responseJson && responseJson.message)\r",
											"  {\r",
											"console.error(\"400 Bad Request missing field : \", responseJson.message);\r",
											" } else {\r",
											"console.error(\"Unknown request error:\", pm.response.text());\r",
											" }\r",
											"});\r",
											"}\r",
											"if(pm.response.code=== 404){\r",
											"    pm.test(\"Response code is 404\", function () {\r",
											" if (responseJson && responseJson.message)\r",
											"  {\r",
											"console.error(\" 404  Request invalid: \", responseJson.message);\r",
											" } else {\r",
											"console.error(\"Unknown bad request:\", pm.response.text());\r",
											" }\r",
											"});\r",
											"}}}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userRoleList\": [\r\n    \"{{userRoleList}}\"\r\n    ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}{{userstatusEndpoint}}",
									"host": [
										"{{baseURL}}{{userstatusEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "UserRoleProgBatStatus01",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var data = pm.iterationData.toObject();\r",
											"var endpoint = data.Endpoint;\r",
											"console.log(\"Endpoint:\", endpoint);\r",
											"\r",
											"\r",
											"if (endpoint === 'users/roleProgramBatchStatus/{userId}') {\r",
											"var programId = data.programId;\r",
											"var roleId = data.roleId;\r",
											"var batchId = data.batchId;\r",
											"var userRoleProgramBatchStatus = data.userRoleProgramBatchStatus;\r",
											"pm.request.url  = pm.variables.replaceIn(\"{{baseURL}}/users/roleProgramBatchStatus\" + userId);\r",
											"\r",
											"}\r",
											"const token = pm.environment.get(\"BearerToken\");\r",
											"if (token) {\r",
											"    pm.request.headers.add({\r",
											"        key: \"Authorization\",\r",
											"        value: `Bearer ${token}`\r",
											"    });\r",
											"} else {\r",
											"    console.error(\"Bearer token not found in environment variables.\");\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.iterationData.toObject();\r",
											"var endpoint = data.Endpoint;\r",
											"if (pm.request.method === \"PUT\" && endpoint === \"/users/roleProgramBatchStatus/{userId}\") {\r",
											"if(pm.response.code===200){\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"        pm.response.to.have.status(\"OK\");\r",
											"        });\r",
											"\r",
											"pm.test(\"Response is valid JSON\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 600ms\",()=>{\r",
											"pm.expect(pm.response.responseTime).to.be.below(600)\r",
											"\r",
											"});\r",
											"try {\r",
											"\r",
											"pm.test(\"Content-Type header is present\", () => {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", () => {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');\r",
											"});\r",
											"//Test the type field\r",
											"pm.test(\"Type is present\", function () {\r",
											"    pm.expect(responseBody).to.have.property('type');\r",
											"    pm.expect(responseBody.type).to.equal('User {userID} has been successfully assigned to Program/Batch(es)');\r",
											"}); \r",
											"}catch (error) {\r",
											"    console.error(\"Error parsing response JSON:\", error.message);\r",
											"\r",
											"}\r",
											" if(pm.response.code=== 400){\r",
											"pm.test(\"Response code is 400\", function () {\r",
											" if (responseJson && responseJson.message)\r",
											"  {\r",
											"console.error(\"400 Bad Request missing field : \", responseJson.message);\r",
											" } else {\r",
											"console.error(\"Unknown request error:\", pm.response.text());\r",
											" }\r",
											"});\r",
											"}\r",
											"if(pm.response.code=== 404){\r",
											"    pm.test(\"Response code is 404\", function () {\r",
											" if (responseJson && responseJson.message)\r",
											"  {\r",
											"console.error(\" 404  Request invalid: \", responseJson.message);\r",
											" } else {\r",
											"console.error(\"Unknown bad request:\", pm.response.text());\r",
											" }\r",
											"});\r",
											"}}}\r",
											"\r",
											"    "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": " {\r\n  \"programId\": {{programId}},\r\n  \"roleId\": \"{{roleId}}\",\r\n  \"userRoleProgramBatches\": [\r\n    {\r\n      \"batchId\": {{batchId}},\r\n      \"userRoleProgramBatchStatus\": \"{{userRoleProgramBatchStatus}}\"\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}{{userroleProgBatEndpoint}}",
									"host": [
										"{{baseURL}}{{userroleProgBatEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "UserLoginStatus01",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var data = pm.iterationData.toObject();\r",
											"var endpoint = data.Endpoint;\r",
											"console.log(\"Endpoint:\", endpoint);\r",
											"\r",
											"\r",
											"if (endpoint === 'users/userLogin/{userId}') {\r",
											"var loginStatus = data.loginStatus;\r",
											"var password = data.password;\r",
											"var roleId = data.roleId;\r",
											"var status= data.status;\r",
											"var UserLoginEmail = data.userLoginEmail;\r",
											"pm.request.url  = pm.variables.replaceIn(\"{{baseURL}}/users/userLogin\" + userId);\r",
											"\r",
											"}\r",
											"const token = pm.environment.get(\"BearerToken\");\r",
											"if (token) {\r",
											"    pm.request.headers.add({\r",
											"        key: \"Authorization\",\r",
											"        value: `Bearer ${token}`\r",
											"    });\r",
											"} else {\r",
											"    console.error(\"Bearer token not found in environment variables.\");\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.iterationData.toObject();\r",
											"var endpoint = data.Endpoint;\r",
											"if (pm.request.method === \"PUT\" && endpoint === \"/users/usersLogin/{userId}\") {\r",
											"if(pm.response.code===200){\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"        pm.response.to.have.status(\"OK\");\r",
											"        });\r",
											"\r",
											"\r",
											"pm.test(\"Response is valid JSON\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 600ms\",()=>{\r",
											"    pm.expect(pm.response.responseTime).to.be.below(600)\r",
											"});\r",
											"try {\r",
											"\r",
											"pm.test(\"Content-Type header is present\", () => {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", () => {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');\r",
											"});\r",
											"//Test the type field\r",
											"pm.test(\"Type is present\", function () {\r",
											"    pm.expect(responseBody).to.have.property('type');\r",
											"    pm.expect(responseBody.type).to.equal('UserLoginEmail/Status Updated for User: {userId}');\r",
											"}); \r",
											"}catch (error) {\r",
											"    console.error(\"Error parsing response JSON:\", error.message);\r",
											"\r",
											"}\r",
											" if(pm.response.code=== 400){\r",
											"pm.test(\"Response code is 400\", function () {\r",
											" if (responseJson && responseJson.message)\r",
											"  {\r",
											"console.error(\"400 Bad Request missing field : \", responseJson.message);\r",
											" } else {\r",
											"console.error(\"Unknown request error:\", pm.response.text());\r",
											" }\r",
											"});\r",
											"}\r",
											"if(pm.response.code=== 404){\r",
											"    pm.test(\"Response code is 404\", function () {\r",
											" if (responseJson && responseJson.message)\r",
											"  {\r",
											"console.error(\" 404  Request invalid: \", responseJson.message);\r",
											" } else {\r",
											"console.error(\"Unknown bad request:\", pm.response.text());\r",
											" }\r",
											"});\r",
											"}}}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"loginStatus\": \"{{loginStatus}}\",\r\n  \"password\":\"{{string}}\",\r\n  \"roleIds\": [\r\n     \"{{roleIds}}\"\r\n  ],\r\n  \"status\": \"{{status}}\",\r\n  \"userLoginEmail\": \"{{userLoginEmail}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}{{userloginEndpoint}}",
									"host": [
										"{{baseURL}}{{userloginEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "UserLoginStatus02",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var data = pm.iterationData.toObject();\r",
											"var endpoint = data.Endpoint;\r",
											"console.log(\"Endpoint:\", endpoint);\r",
											"\r",
											"\r",
											"if (endpoint === 'users/userLogin/{userId}') {\r",
											"var loginStatus = data.loginStatus;\r",
											"var password = data.password;\r",
											"var roleId = data.roleId;\r",
											"var status= data.status;\r",
											"var UserLoginEmail = data.userLoginEmail;\r",
											"pm.request.url  = pm.variables.replaceIn(\"{{baseURL}}/users/userLogin\" + userId);\r",
											"\r",
											"}\r",
											"const token = pm.environment.get(\"BearerToken\");\r",
											"if (token) {\r",
											"    pm.request.headers.add({\r",
											"        key: \"Authorization\",\r",
											"        value: `Bearer ${token}`\r",
											"    });\r",
											"} else {\r",
											"    console.error(\"Bearer token not found in environment variables.\");\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.iterationData.toObject();\r",
											"var endpoint = data.Endpoint;\r",
											"if (pm.request.method === \"PUT\" && endpoint === \"/users/userLogin/{userId}\") {\r",
											"if(pm.response.code===200){\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"        pm.response.to.have.status(\"OK\");\r",
											"        });\r",
											"\r",
											"pm.test(\"Response is valid JSON\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 600ms\",()=>{\r",
											"    pm.expect(pm.response.responseTime).to.be.below(400)\r",
											"\r",
											"});\r",
											"try {\r",
											"\r",
											"pm.test(\"Content-Type header is present\", () => {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", () => {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');\r",
											"});\r",
											"//Test the type field\r",
											"pm.test(\"Type is present\", function () {\r",
											"    pm.expect(responseBody).to.have.property('type');\r",
											"    pm.expect(responseBody.type).to.equal('UserLoginEmail/Status Updated for User: {userId}');\r",
											"}); \r",
											"}catch (error) {\r",
											"    console.error(\"Error parsing response JSON:\", error.message);\r",
											"\r",
											"}\r",
											" if(pm.response.code=== 400){\r",
											"pm.test(\"Response code is 400\", function () {\r",
											" if (responseJson && responseJson.message)\r",
											"  {\r",
											"console.error(\"400 Bad Request missing field : \", responseJson.message);\r",
											" } else {\r",
											"console.error(\"Unknown request error:\", pm.response.text());\r",
											" }\r",
											"});\r",
											"}\r",
											"if(pm.response.code=== 404){\r",
											"    pm.test(\"Response code is 404\", function () {\r",
											" if (responseJson && responseJson.message)\r",
											"  {\r",
											"console.error(\" 404  Request invalid: \", responseJson.message);\r",
											" } else {\r",
											"console.error(\"Unknown bad request:\", pm.response.text());\r",
											" }\r",
											"});\r",
											"}}}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"loginStatus\": \"{{loginStatus}}\",\r\n  \"password\": \"{{string}}\",\r\n  \"roleIds\": [\r\n     \"{{roleIds}}\"\r\n  ],\r\n  \"status\": \"{{status}}\",\r\n  \"userLoginEmail\": \"{{userLoginEmail}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}{{userloginEndpoint}}",
									"host": [
										"{{baseURL}}{{userloginEndpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DeleteUser",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.iterationData.toObject();\r",
											"var endpoint = data.Endpoint;\r",
											"if (pm.request.method === \"DELETE\" && endpoint === \"/users/{userId}\") {\r",
											"if(pm.response.code===200){\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"        pm.response.to.have.status(\"OK\");\r",
											"        });\r",
											"\r",
											"pm.test(\"Response is valid JSON\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 600ms\",()=>{\r",
											"    pm.expect(pm.response.responseTime).to.be.below(600)\r",
											"});\r",
											"try {\r",
											"\r",
											"pm.test(\"Content-Type header is present\", () => {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", () => {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');\r",
											"});\r",
											"//Test the type field\r",
											"pm.test(\"Type is present\", function () {\r",
											"    pm.expect(responseBody).to.have.property('type');\r",
											"    pm.expect(responseBody.type).to.equal('Success');\r",
											"}); \r",
											"}catch (error) {\r",
											"    console.error(\"Error parsing response JSON:\", error.message);\r",
											"\r",
											"}\r",
											" if(pm.response.code=== 400){\r",
											"pm.test(\"Response code is 400\", function () {\r",
											" if (responseJson && responseJson.message)\r",
											"  {\r",
											"console.error(\"400 Bad Request missing field : \", responseJson.message);\r",
											" } else {\r",
											"console.error(\"Unknown request error:\", pm.response.text());\r",
											" }\r",
											"});\r",
											"}\r",
											"if(pm.response.code=== 404){\r",
											"    pm.test(\"Response code is 404\", function () {\r",
											" if (responseJson && responseJson.message)\r",
											"  {\r",
											"console.error(\" 404  Request invalid: \", responseJson.message);\r",
											" } else {\r",
											"console.error(\"Unknown bad request:\", pm.response.text());\r",
											" }\r",
											"});\r",
											"}}}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}users/{userId}",
									"host": [
										"{{baseURL}}users"
									],
									"path": [
										"{userId}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "bearer"
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "BaseurlLMS",
			"value": "https://lms-marchapi-hackathon-a258d2bbd43b.herokuapp.com/lms",
			"type": "string"
		}
	]
}